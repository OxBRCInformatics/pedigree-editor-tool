/*! pedigree-editor-tool - v1.3.0 - 2017-05-19
* https://github.com/OxBRCInformatics/pedigree-editor-tool#readme
* Copyright (c) 2017  Licensed AGPL-3.0 */

DynamicPositionedGraph=function(drawGraph){this.DG=drawGraph,this._heuristics=new Heuristics(drawGraph),this._heuristics.improvePositioning(),this._onlyProbandGraph=[{name:"proband"}]},DynamicPositionedGraph.makeEmpty=function(layoutRelativePersonWidth,layoutRelativeOtherWidth){var baseG=new BaseGraph(layoutRelativePersonWidth,layoutRelativeOtherWidth),positionedG=new PositionedGraph(baseG);return new DynamicPositionedGraph(positionedG)},DynamicPositionedGraph.prototype={isValidID:function(id){return!(id<0||id>this.DG.GG.getMaxRealVertexId())&&!(!this.DG.GG.isPerson(id)&&!this.DG.GG.isRelationship(id))},getMaxNodeId:function(){return this.DG.GG.getMaxRealVertexId()},isPersonGroup:function(id){return this.getProperties(id).hasOwnProperty("numPersons")},isPerson:function(id){return this.DG.GG.isPerson(id)},isRelationship:function(id){return this.DG.GG.isRelationship(id)},isPlaceholder:function(id){return this.DG.GG.isPlaceholder(id)},isAdoptedIn:function(id){if(!this.isPerson(id))throw"Assertion failed: isAdopted() is applied to a non-person";return this.DG.GG.isAdoptedIn(id)},isAdoptedOut:function(id){if(!this.isPerson(id))throw"Assertion failed: isAdopted() is applied to a non-person";return this.DG.GG.isAdoptedOut(id)},getGeneration:function(id){var minRank=Math.min.apply(null,this.DG.ranks);return(this.DG.ranks[id]-minRank)/2+1},getOrderWithinGeneration:function(id){if(!this.isPerson(id))throw"Assertion failed: getOrderWithinGeneration() is applied to a non-person";for(var order=0,rank=this.DG.ranks[id],i=0;i<this.DG.order.order[rank].length;i++){var next=this.DG.order.order[rank][i];if(this.DG.GG.isPerson(next)&&!this.DG.GG.isPlaceholder(next)&&order++,next==id)break}return order},getTwinGroupId:function(id){return this.DG.GG.getTwinGroupId(id)},getAllTwinsSortedByOrder:function(id){var twins=this.DG.GG.getAllTwinsOf(id),vOrder=this.DG.order.vOrder,byOrder=function(a,b){return vOrder[a]-vOrder[b]};return twins.sort(byOrder),twins},isChildless:function(id){return!!this.getProperties(id).hasOwnProperty("childlessStatus")&&null!==this.getProperties(id).childlessStatus},isChildlessByChoice:function(id){return!!this.getProperties(id).hasOwnProperty("childlessStatus")&&"childless"==this.getProperties(id).childlessStatus},isInfertile:function(id){return!!this.getProperties(id).hasOwnProperty("childlessStatus")&&"infertile"==this.getProperties(id).childlessStatus},isConsangrRelationship:function(id){if(!this.isRelationship(id))throw"Assertion failed: isConsangrRelationship() is applied to a non-relationship";return this.DG.consangr.hasOwnProperty(id)},getProperties:function(id){return this.DG.GG.properties[id]},setProperties:function(id,newSetOfProperties){this.DG.GG.properties[id]=newSetOfProperties},setProbandData:function(patientObject){patientObject.hasOwnProperty("patient_name")&&(patientObject.patient_name.hasOwnProperty("first_name")?this.DG.GG.properties[0].fName=patientObject.patient_name.first_name:this.DG.GG.properties[0].fName="",patientObject.patient_name.hasOwnProperty("last_name")?this.DG.GG.properties[0].lName=patientObject.patient_name.last_name:this.DG.GG.properties[0].lName="");if(patientObject.hasOwnProperty("sex")){var probandSex=patientObject.sex,genderString=probandSex.toLowerCase();"female"==genderString||"f"==genderString||"2"==genderString?probandSex="F":"male"==genderString||"m"==genderString||"1"==genderString?probandSex="M":"other"!=genderString&&"o"!=genderString&&"9"!=genderString||(probandSex="O");var possibleGenders=this.getPossibleGenders(0);possibleGenders.hasOwnProperty(probandSex)&&possibleGenders[probandSex]||(probandSex="U",!1),this.DG.GG.properties[0].gender=probandSex}if(patientObject.hasOwnProperty("life_status")){var lifeStatus=patientObject.life_status;"deceased"!=lifeStatus&&"alive"!=lifeStatus||(this.DG.GG.properties[0].lifeStatus=lifeStatus)}else delete this.DG.GG.properties[0].lifeStatus;if(patientObject.hasOwnProperty("ethnicity")){var ethnicities=[];patientObject.ethnicity.hasOwnProperty("maternal_ethnicity")&&(ethnicities=patientObject.ethnicity.maternal_ethnicity.slice(0)),patientObject.ethnicity.hasOwnProperty("paternal_ethnicity")&&(ethnicities=ethnicities.concat(patientObject.ethnicity.paternal_ethnicity.slice(0))),ethnicities.length>0&&(this.DG.GG.properties[0].ethnicities=Helpers.filterUnique(ethnicities))}patientObject.hasOwnProperty("external_id")?this.DG.GG.properties[0].externalID=patientObject.external_id:delete this.DG.GG.properties[0].externalID;var genes=[];if(patientObject.hasOwnProperty("genes"))for(var i=0;i<patientObject.genes.length;i++)genes.push(patientObject.genes[i].gene);return genes.length>0?this.DG.GG.properties[0].candidateGenes=genes:delete this.DG.GG.properties[0].candidateGenes,!0},getPosition:function(v){var x=this.DG.positions[v],rank=this.DG.ranks[v],vertLevel=this.DG.GG.isChildhub(v)?this.DG.vertLevel.childEdgeLevel[v]:1,y=this.DG.computeNodeY(rank,vertLevel);if(this.DG.GG.isVirtual(v)){var relId=this.DG.GG.downTheChainUntilNonVirtual(v),personId=this.DG.GG.upTheChainUntilNonVirtual(v);if(rank==this.DG.ranks[personId]){level=this.DG.vertLevel.outEdgeVerticalLevel[personId][relId].verticalLevel;y=this.DG.computeRelLineY(rank,0,level).relLineY}rank==this.DG.ranks[relId]&&(y=this.getPosition(relId).y)}else if(this.isRelationship(v)){var partners=this.DG.GG.getParents(v),level1=this.DG.vertLevel.outEdgeVerticalLevel[partners[0]].hasOwnProperty(v)?this.DG.vertLevel.outEdgeVerticalLevel[partners[0]][v].verticalLevel:0,level2=this.DG.vertLevel.outEdgeVerticalLevel[partners[1]].hasOwnProperty(v)?this.DG.vertLevel.outEdgeVerticalLevel[partners[1]][v].verticalLevel:0,level=Math.min(level1,level2),attach1=this.DG.vertLevel.outEdgeVerticalLevel[partners[0]].hasOwnProperty(v)?this.DG.vertLevel.outEdgeVerticalLevel[partners[0]][v].attachlevel:0,attach2=this.DG.vertLevel.outEdgeVerticalLevel[partners[1]].hasOwnProperty(v)?this.DG.vertLevel.outEdgeVerticalLevel[partners[1]][v].attachlevel:0,attach=Math.min(attach1,attach2);y=this.DG.computeRelLineY(rank,attach,level).relLineY}return{x:x,y:y}},getRelationshipChildLastName:function(v){if(!this.isRelationship(v))throw"Assertion failed: getRelationshipChildLastName() is applied to a non-relationship";var fatherLastName=null,parents=this.DG.GG.getParents(v);if("M"==this.getGender(parents[0]))fatherLastName=this.DG.GG.getLastName(parents[0]);else{if("M"!=this.getGender(parents[1]))return null;fatherLastName=this.DG.GG.getLastName(parents[1])}if(""==fatherLastName)return null;for(var childhubId=this.DG.GG.getRelationshipChildhub(v),children=this.DG.GG.getOutEdges(childhubId),i=0;i<children.length;i++){var childLastName=this.DG.GG.getLastNameAtBirth(children[i]);if(""!=childLastName&&childLastName!=fatherLastName)return null}return fatherLastName},getRelationshipChildhubPosition:function(v){if(!this.isRelationship(v))throw"Assertion failed: getRelationshipChildhubPosition() is applied to a non-relationship";var childhubId=this.DG.GG.getRelationshipChildhub(v);return this.getPosition(childhubId)},getRelationshipLineInfo:function(relationship,person){if(!this.isRelationship(relationship))throw"Assertion failed: getRelationshipToPersonLinePosition() is applied to a non-relationship";if(!this.isPerson(person))throw"Assertion failed: getRelationshipToPersonLinePosition() is applied to a non-person";var info=this.DG.vertLevel.outEdgeVerticalLevel[person].hasOwnProperty(relationship)?this.DG.vertLevel.outEdgeVerticalLevel[person][relationship]:{attachlevel:0,verticalLevel:0,numAttachLevels:1},verticalRelInfo=this.DG.computeRelLineY(this.DG.ranks[person],info.attachlevel,info.verticalLevel);return{attachmentPort:info.attachlevel,attachY:verticalRelInfo.attachY,verticalLevel:info.verticalLevel,verticalY:verticalRelInfo.relLineY,numAttachPorts:info.numAttachLevels}},getRelationshipChildrenSortedByOrder:function(v){if(!this.isRelationship(v))throw"Assertion failed: getRelationshipChildren() is applied to a non-relationship";var childhubId=this.DG.GG.getRelationshipChildhub(v),children=this.DG.GG.getOutEdges(childhubId),vOrder=this.DG.order.vOrder,byOrder=function(a,b){return vOrder[a]-vOrder[b]};return children.sort(byOrder),children},getAllChildren:function(v){if(!this.isPerson(v)&&!this.isRelationship(v))throw"Assertion failed: getAllChildren() is applied to a non-person non-relationship node";for(var rels=this.isRelationship(v)?[v]:this.DG.GG.getAllRelationships(v),allChildren=[],i=0;i<rels.length;i++){var chhub=this.DG.GG.getOutEdges(rels[i])[0],children=this.DG.GG.getOutEdges(chhub);allChildren=allChildren.concat(children)}return allChildren},isChildOfProband:function(v){var parents=this.DG.GG.getParents(v);return!!Helpers.arrayContains(parents,0)},isSiblingOfProband:function(v){var siblings=this.DG.GG.getAllSiblingsOf(v);return!!Helpers.arrayContains(siblings,0)},isPartnershipRelatedToProband:function(v){var parents=this.DG.GG.getParents(v);return!!Helpers.arrayContains(parents,0)||v==this.DG.GG.getProducingRelationship(0)},isRelatedToProband:function(v){for(var probandRelatedRels=this.getAllRelatedRelationships(0),i=0;i<probandRelatedRels.length;i++){var rel=probandRelatedRels[i],parents=this.DG.GG.getParents(rel);if(Helpers.arrayContains(parents,v))return!0;var children=this.getAllChildren(rel);if(Helpers.arrayContains(children,v))return!0}return!1},getAllRelatedRelationships:function(v){var allRels=this.DG.GG.getAllRelationships(v),parentRel=this.DG.GG.getProducingRelationship(v);return null!=parentRel&&allRels.push(parentRel),allRels},getAllSiblings:function(v){if(!this.isPerson(v))throw"Assertion failed: getAllSiblings() is applied to a non-person";if(0==this.DG.GG.getInEdges(v).length)return[];var chhub=this.DG.GG.getInEdges(v)[0],siblings=this.DG.GG.getOutEdges(chhub).slice(0);return Helpers.removeFirstOccurrenceByValue(siblings,v),siblings},isOnlyChild:function(v){if(!this.isPerson(v))throw"Assertion failed: isOnlyPartnerlessChild() is applied to a non-person";return 0!=this.DG.GG.getInEdges(v).length&&0==this.getAllSiblings(v).length},hasNonPlaceholderNonAdoptedChildren:function(v){var children=[];this.isRelationship(v)?children=this.getRelationshipChildrenSortedByOrder(v):this.isPerson(v)&&(children=this.getAllChildren(v));for(var i=0;i<children.length;i++){var child=children[i];if(!this.isPlaceholder(child)&&!this.isAdoptedIn(child))return!0}return!1},hasNoNonPlaceholderChildren:function(v){var children=[];this.isRelationship(v)?children=this.getRelationshipChildrenSortedByOrder(v):this.isPerson(v)&&(children=this.getAllChildren(v));for(var i=0;i<children.length;i++){var child=children[i];if(!this.isPlaceholder(child))return!1}return!0},getParentRelationship:function(v){if(!this.isPerson(v))throw"Assertion failed: getParentRelationship() is applied to a non-person";return this.DG.GG.getProducingRelationship(v)},hasToBeAdopted:function(v){if(!this.isPerson(v))throw"Assertion failed: hasToBeAdopted() is applied to a non-person";var parentRel=this.getParentRelationship(v);return!(null===parentRel||!this.isChildless(parentRel))},hasRelationships:function(v){if(!this.isPerson(v))throw"Assertion failed: hasRelationships() is applied to a non-person";return this.DG.GG.v[v].length>0},getPossibleGenders:function(v){for(var possible={M:!0,F:!0,O:!0,U:!0},partners=this.DG.GG.getAllPartners(v),i=0;i<partners.length;i++){var partnerGender=this.getGender(partners[i]);"U"!=partnerGender&&"O"!=partnerGender&&(possible[partnerGender]=!1)}return possible},getPossibleChildrenOf:function(v){for(var result=[],i=0;i<=this.DG.GG.getMaxRealVertexId();i++)this.isPerson(i)&&0==this.DG.GG.inedges[i].length&&(this.DG.ancestors[v].hasOwnProperty(i)||result.push(i));return result},getPossibleSiblingsOf:function(v){for(var hasParents=null!==this.getParentRelationship(v),result=[],i=0;i<=this.DG.GG.getMaxRealVertexId();i++)this.isPerson(i)&&(this.DG.ancestors[v].hasOwnProperty(i)||this.DG.ancestors[i].hasOwnProperty(v)||hasParents&&0!=this.DG.GG.inedges[i].length||result.push(i));return result},getPossibleParentsOf:function(v){for(var result=[],i=0;i<=this.DG.GG.getMaxRealVertexId();i++)(this.isRelationship(i)||this.isPerson(i))&&(this.isPersonGroup(i)||this.isPlaceholder(i)||this.DG.ancestors[i].hasOwnProperty(v)||this.isPerson(i)&&this.isAdoptedOut(i)||result.push(i));return result},getPossiblePartnersOf:function(v){var oppositeGender=this.DG.GG.getOppositeGender(v),validGendersSet="U"==oppositeGender?["M","F","U","O"]:[oppositeGender,"U","O"],result=this._getAllPersonsOfGenders(validGendersSet,!0),partners=this.DG.GG.getAllPartners(v);partners.push(v);for(var i=0;i<partners.length;i++)Helpers.removeFirstOccurrenceByValue(result,partners[i]);return result},getOppositeGender:function(v){if(!this.isPerson(v))throw"Assertion failed: getOppositeGender() is applied to a non-person";return this.DG.GG.getOppositeGender(v)},getGender:function(v){if(!this.isPerson(v))throw"Assertion failed: getGender() is applied to a non-person";return this.DG.GG.getGender(v)},getLastName:function(v){if(!this.isPerson(v))throw"Assertion failed: getLastName() is applied to a non-person";return this.DG.GG.getLastName(v)},getDisconnectedSetIfNodeRemoved:function(v){var removedList={};if(removedList[v]=!0,this.isPerson(v))for(var allRels=this.DG.GG.getAllRelationships(v),i=0;i<allRels.length;i++)removedList[allRels[i]]=!0;for(var node in removedList)removedList.hasOwnProperty(node)&&this.isRelationship(node)&&(removedList[this.DG.GG.getOutEdges(node)[0]]=!0);var connected={},queue=new Queue;for(queue.push(0);queue.size()>0;){var next=parseInt(queue.pop());if(!connected.hasOwnProperty(next)){connected[next]=!0;for(var outEdges=this.DG.GG.getOutEdges(next),i=0;i<outEdges.length;i++)removedList.hasOwnProperty(outEdges[i])||queue.push(outEdges[i]);for(var inEdges=this.DG.GG.getInEdges(next),i=0;i<inEdges.length;i++)removedList.hasOwnProperty(inEdges[i])||queue.push(inEdges[i])}}console.log("Connected nodes: "+Helpers.stringifyObject(connected));for(var affected=[],i=0;i<this.DG.GG.getNumVertices();i++)(this.isPerson(i)||this.isRelationship(i))&&(connected.hasOwnProperty(i)||affected.push(i));return console.log("Affected nodes: "+Helpers.stringifyObject(affected)),affected},_debugPrintAll:function(headerMessage){console.log("========== "+headerMessage+" ==========")},updateAncestors:function(){var ancestors=this.DG.findAllAncestors();this.DG.ancestors=ancestors.ancestors,this.DG.consangr=ancestors.consangr;for(var movedNodes=[],i=0;i<=this.DG.GG.getMaxRealVertexId();i++)this.isRelationship(i)&&movedNodes.push(i);return{moved:movedNodes}},addNewChild:function(childhubId,properties,numTwins){this._debugPrintAll("before");var timer=new Helpers.Timer;if(!this.DG.GG.isChildhub(childhubId)){if(!this.DG.GG.isRelationship(childhubId))throw"Assertion failed: adding children to a non-childhub node";childhubId=this.DG.GG.getRelationshipChildhub(childhubId)}var positionsBefore=this.DG.positions.slice(0),ranksBefore=this.DG.ranks.slice(0),vertLevelsBefore=this.DG.vertLevel.copy(),rankYBefore=this.DG.rankY.slice(0),numNodesBefore=this.DG.GG.getMaxRealVertexId();properties||(properties={}),numTwins||(numTwins=1);for(var insertRank=this.DG.ranks[childhubId]+1,insertOrder=this._findBestInsertPosition(insertRank,childhubId),newNodeId=this._insertVertex(BaseGraph.TYPE.PERSON,properties,1,childhubId,null,insertRank,insertOrder),newNodes=[newNodeId],i=0;i<numTwins-1;i++){var changeSet=this.addTwin(newNodeId,properties);newNodes.push(changeSet.new[0])}this.DG.GG.validate(),this._heuristics.improvePositioning(ranksBefore,rankYBefore),this.updateAncestors(),timer.printSinceLast("=== AddChild runtime: "),this._debugPrintAll("after");var movedNodes=this._findMovedNodes(numNodesBefore,positionsBefore,ranksBefore,vertLevelsBefore,rankYBefore),relationshipId=this.DG.GG.getInEdges(childhubId)[0];return Helpers.arrayContains(movedNodes,relationshipId)||movedNodes.push(relationshipId),{new:newNodes,moved:movedNodes,animate:this.DG.GG.getInEdges(relationshipId)}},addNewParents:function(personId){this._debugPrintAll("before");var timer=new Helpers.Timer;if(!this.DG.GG.isPerson(personId))throw"Assertion failed: adding parents to a non-person node";if(this.DG.GG.getInEdges(personId).length>0)throw"Assertion failed: adding parents to a person with parents";var positionsBefore=this.DG.positions.slice(0),ranksBefore=this.DG.ranks.slice(0),vertLevelsBefore=this.DG.vertLevel.copy(),rankYBefore=this.DG.rankY.slice(0),numNodesBefore=this.DG.GG.getMaxRealVertexId();this._heuristics.swapBeforeParentsToBringToSideIfPossible(personId);var insertChildhubRank=this.DG.ranks[personId]-1,insertChildhubOrder=this._findBestInsertPosition(insertChildhubRank,personId),newChildhubId=this._insertVertex(BaseGraph.TYPE.CHILDHUB,{},1,null,personId,insertChildhubRank,insertChildhubOrder),insertParentsRank=this.DG.ranks[newChildhubId]-1,insertParentOrder=this._findBestInsertPosition(insertParentsRank,newChildhubId),newRelationshipId=this._insertVertex(BaseGraph.TYPE.RELATIONSHIP,{},1,null,newChildhubId,insertParentsRank,insertParentOrder);insertParentsRank=this.DG.ranks[newRelationshipId];var newParent1Id=this._insertVertex(BaseGraph.TYPE.PERSON,{gender:"F"},1,null,newRelationshipId,insertParentsRank,insertParentOrder+1),newParent2Id=this._insertVertex(BaseGraph.TYPE.PERSON,{gender:"M"},1,null,newRelationshipId,insertParentsRank,insertParentOrder);this.DG.GG.validate(),this._heuristics.improvePositioning(ranksBefore,rankYBefore),this.updateAncestors(),timer.printSinceLast("=== NewParents runtime: "),this._debugPrintAll("after");var animateNodes=this.DG.GG.getAllPartners(personId);return 1==animateNodes.length?animateNodes.push(personId):animateNodes=[personId],{new:[newRelationshipId,newParent1Id,newParent2Id],moved:this._findMovedNodes(numNodesBefore,positionsBefore,ranksBefore,vertLevelsBefore,rankYBefore),highlight:[personId],animate:animateNodes}},addNewRelationship:function(personId,childProperties,preferLeft,numTwins){this._debugPrintAll("before");var timer=new Helpers.Timer;if(!this.DG.GG.isPerson(personId))throw"Assertion failed: adding relationship to a non-person node";var positionsBefore=this.DG.positions.slice(0),ranksBefore=this.DG.ranks.slice(0),vertLevelsBefore=this.DG.vertLevel.copy(),rankYBefore=this.DG.rankY.slice(0),consangrBefore=this.DG.consangr,numNodesBefore=this.DG.GG.getMaxRealVertexId();childProperties||(childProperties={}),numTwins||(numTwins=1);var partnerProperties={gender:this.DG.GG.getOppositeGender(personId)},insertRank=this.DG.ranks[personId],personOrder=this.DG.order.vOrder[personId],relProperties={};if(childProperties.hasOwnProperty("placeholder")&&childProperties.placeholder){relProperties.childlessStatus="childless"}this._heuristics.swapPartnerToBringToSideIfPossible(personId),this._heuristics.swapTwinsToBringToSideIfPossible(personId);var insertOrder=this._findBestInsertPosition(insertRank,personId,preferLeft);console.log("vOrder: "+personOrder+", inserting @ "+insertOrder),console.log("Orders before: "+Helpers.stringifyObject(this.DG.order.order[this.DG.ranks[personId]]));var newRelationshipId=this._insertVertex(BaseGraph.TYPE.RELATIONSHIP,relProperties,1,personId,null,insertRank,insertOrder);console.log("Orders after: "+Helpers.stringifyObject(this.DG.order.order[this.DG.ranks[personId]]));for(var insertPersonOrder=insertOrder>personOrder?insertOrder+1:insertOrder,newPersonId=this._insertVertex(BaseGraph.TYPE.PERSON,partnerProperties,1,null,newRelationshipId,insertRank,insertPersonOrder),insertChildhubRank=insertRank+1,insertChildhubOrder=this._findBestInsertPosition(insertChildhubRank,newRelationshipId),newChildhubId=this._insertVertex(BaseGraph.TYPE.CHILDHUB,{},1,newRelationshipId,null,insertChildhubRank,insertChildhubOrder),insertChildRank=insertChildhubRank+1,insertChildOrder=this._findBestInsertPosition(insertChildRank,newChildhubId),newChildId=this._insertVertex(BaseGraph.TYPE.PERSON,childProperties,1,newChildhubId,null,insertChildRank,insertChildOrder),newNodes=[newRelationshipId,newPersonId,newChildId],i=0;i<numTwins-1;i++){var changeSet=this.addTwin(newChildId,childProperties);newNodes.push(changeSet.new[0])}return console.log("Orders after all: "+Helpers.stringifyObject(this.DG.order.order[this.DG.ranks[personId]])),this.DG.GG.validate(),this._heuristics.improvePositioning(ranksBefore,rankYBefore),this.updateAncestors(),timer.printSinceLast("=== NewRelationship runtime: "),this._debugPrintAll("after"),{new:newNodes,moved:this._findMovedNodes(numNodesBefore,positionsBefore,ranksBefore,vertLevelsBefore,rankYBefore,consangrBefore),highlight:[personId]}},assignParent:function(parentId,childId){if(this.isRelationship(parentId)){var childHubId=this.DG.GG.getRelationshipChildhub(parentId),rankChildHub=this.DG.ranks[childHubId],rankChild=this.DG.ranks[childId],otherChildren=this.getAllChildren(parentId);if(this.DG.GG.addEdge(childHubId,childId,1),1==otherChildren.length&&this.isPlaceholder(otherChildren[0]))var removeChangeSet=this.removeNodes([otherChildren[0]]);animateList=[childId];if(rankChildHub!=rankChild-1){var removedList=removeChangeSet?removeChangeSet.removed:[];return this.redrawAll(removedList,animateList)}var positionsBefore=this.DG.positions.slice(0),ranksBefore=this.DG.ranks.slice(0),vertLevelsBefore=this.DG.vertLevel.copy(),rankYBefore=this.DG.rankY.slice(0),consangrBefore=this.DG.consangr,numNodesBefore=this.DG.GG.getMaxRealVertexId();this.DG.GG.validate(),this._updateauxiliaryStructures(ranksBefore,rankYBefore),positionsBefore[parentId]=1/0;var movedNodes=this._findMovedNodes(numNodesBefore,positionsBefore,ranksBefore,vertLevelsBefore,rankYBefore,consangrBefore);return removeChangeSet?(removeChangeSet.moved=removeChangeSet.moved.concat(movedNodes),removeChangeSet.moved=Helpers.filterUnique(removeChangeSet.moved),removeChangeSet.animate=[childId],removeChangeSet):{moved:movedNodes,animate:[childId]}}var rankParent=this.DG.ranks[parentId],rankChild=this.DG.ranks[childId],partnerProperties={gender:this.DG.GG.getOppositeGender(parentId)};if(rankParent>=rankChild){var ranksBefore=this.DG.ranks.slice(0),insertChildhubRank=rankChild-1,newChildhubId=this._insertVertex(BaseGraph.TYPE.CHILDHUB,{},1,null,childId,insertChildhubRank,0),insertParentsRank=this.DG.ranks[newChildhubId]-1,newRelationshipId=this._insertVertex(BaseGraph.TYPE.RELATIONSHIP,{},1,null,newChildhubId,insertParentsRank,0),newParentId=this._insertVertex(BaseGraph.TYPE.PERSON,partnerProperties,1,null,newRelationshipId,insertParentsRank,0);this.DG.GG.addEdge(parentId,newRelationshipId,1);var animateList=[childId,parentId],newList=[newRelationshipId,newParentId];return this.redrawAll(null,animateList,newList,ranksBefore)}this._debugPrintAll("before");var timer=new Helpers.Timer,positionsBefore=this.DG.positions.slice(0),ranksBefore=this.DG.ranks.slice(0),vertLevelsBefore=this.DG.vertLevel.copy(),rankYBefore=this.DG.rankY.slice(0),consangrBefore=this.DG.consangr,numNodesBefore=this.DG.GG.getMaxRealVertexId(),x_parent=this.DG.positions[parentId],x_child=this.DG.positions[childId];if(rankParent==rankChild-2){var preferLeft=x_child<x_parent,insertRelatOrder=this._findBestInsertPosition(rankParent,parentId,preferLeft),newRelationshipId=this._insertVertex(BaseGraph.TYPE.RELATIONSHIP,{},1,parentId,null,rankParent,insertRelatOrder),newParentOrder=this.DG.order.vOrder[parentId]>this.DG.order.vOrder[newRelationshipId]?insertRelatOrder:insertRelatOrder+1,newParentId=this._insertVertex(BaseGraph.TYPE.PERSON,partnerProperties,1,null,newRelationshipId,rankParent,newParentOrder),insertChildhubRank=rankChild-1,insertChildhubOrder=this._findBestInsertPosition(insertChildhubRank,newRelationshipId),newChildhubId=this._insertVertex(BaseGraph.TYPE.CHILDHUB,{},1,newRelationshipId,null,insertChildhubRank,insertChildhubOrder);this.DG.GG.addEdge(newChildhubId,childId,1)}else{var insertChildhubRank=rankChild-1,insertChildhubOrder=this._findBestInsertPosition(insertChildhubRank,childId),newChildhubId=this._insertVertex(BaseGraph.TYPE.CHILDHUB,{},1,null,childId,insertChildhubRank,insertChildhubOrder),insertParentsRank=rankChild-2,insertRelatOrder=this._findBestInsertPosition(insertParentsRank,newChildhubId),newRelationshipId=this._insertVertex(BaseGraph.TYPE.RELATIONSHIP,{},1,null,newChildhubId,insertParentsRank,insertRelatOrder),newParentOrder=this.DG.positions[parentId]>this.DG.positions[newRelationshipId]?insertRelatOrder:insertRelatOrder+1,newParentId=this._insertVertex(BaseGraph.TYPE.PERSON,partnerProperties,1,null,newRelationshipId,insertParentsRank,newParentOrder);this._addMultiRankEdge(parentId,newRelationshipId)}return this.DG.GG.validate(),this._heuristics.improvePositioning(ranksBefore,rankYBefore),this.updateAncestors(),timer.printSinceLast("=== DragToParentOrChild runtime: "),this._debugPrintAll("after"),this.DG.positions.length>=31&&console.log("position of node 32: "+this.DG.positions[32]+", was: "+positionsBefore[32]),{new:[newRelationshipId,newParentId],moved:movedNodes=this._findMovedNodes(numNodesBefore,positionsBefore,ranksBefore,vertLevelsBefore,rankYBefore,consangrBefore),highlight:[parentId,newParentId,childId]}},assignPartner:function(person1,person2,childProperties){var positionsBefore=this.DG.positions.slice(0),ranksBefore=this.DG.ranks.slice(0),vertLevelsBefore=this.DG.vertLevel.copy(),rankYBefore=this.DG.rankY.slice(0),consangrBefore=this.DG.consangr,numNodesBefore=this.DG.GG.getMaxRealVertexId(),rankP1=this.DG.ranks[person1],rankP2=this.DG.ranks[person2];if(rankP1<rankP2||rankP1==rankP2&&this.DG.order.vOrder[person2]<this.DG.order.vOrder[person1]){var tmpPerson=person2;person2=person1,person1=tmpPerson,rankP1=rankP2,rankP2=this.DG.ranks[person2]}var x_person1=this.DG.positions[person1],preferLeft=this.DG.positions[person2]<x_person1,insertRelatOrder=rankP1==rankP2?this._findBestRelationshipPosition(person1,!1,person2):this._findBestRelationshipPosition(person1,preferLeft),relProperties={};childProperties.hasOwnProperty("placeholder")&&childProperties.placeholder&&(relProperties.childlessStatus="childless");var newRelationshipId=this._insertVertex(BaseGraph.TYPE.RELATIONSHIP,relProperties,1,person1,null,rankP1,insertRelatOrder),insertChildhubRank=this.DG.ranks[newRelationshipId]+1,insertChildhubOrder=this._findBestInsertPosition(insertChildhubRank,newRelationshipId),newChildhubId=this._insertVertex(BaseGraph.TYPE.CHILDHUB,{},1,newRelationshipId,null,insertChildhubRank,insertChildhubOrder),insertChildRank=insertChildhubRank+1,insertChildOrder=this._findBestInsertPosition(insertChildRank,newChildhubId),newChildId=this._insertVertex(BaseGraph.TYPE.PERSON,childProperties,1,newChildhubId,null,insertChildRank,insertChildOrder);return rankP1==rankP2?this.DG.GG.addEdge(person2,newRelationshipId,1):this._addMultiRankEdge(person2,newRelationshipId),this.DG.GG.validate(),this._heuristics.improvePositioning(ranksBefore,rankYBefore),this.updateAncestors(),this._debugPrintAll("after"),{new:[newRelationshipId,newChildId],moved:this._findMovedNodes(numNodesBefore,positionsBefore,ranksBefore,vertLevelsBefore,rankYBefore,consangrBefore),highlight:[person1,person2,newChildId]}},addTwin:function(personId,properties){var positionsBefore=this.DG.positions.slice(0),ranksBefore=this.DG.ranks.slice(0),vertLevelsBefore=this.DG.vertLevel.copy(),rankYBefore=this.DG.rankY.slice(0),numNodesBefore=this.DG.GG.getMaxRealVertexId(),parentRel=this.DG.GG.getProducingRelationship(personId),twinGroupId=this.DG.GG.getTwinGroupId(personId);null===twinGroupId&&(twinGroupId=this.DG.GG.getUnusedTwinGroupId(parentRel),console.log("new twin id: "+twinGroupId),this.DG.GG.properties[personId].twinGroup=twinGroupId),properties.twinGroup=twinGroupId;var insertRank=this.DG.ranks[personId],insertOrder=this.DG.findBestTwinInsertPosition(personId,[]),childhubId=this.DG.GG.getInEdges(personId)[0],newNodeId=this._insertVertex(BaseGraph.TYPE.PERSON,properties,1,childhubId,null,insertRank,insertOrder);this.DG.GG.validate(),this._heuristics.improvePositioning(ranksBefore,rankYBefore);var movedNodes=this._findMovedNodes(numNodesBefore,positionsBefore,ranksBefore,vertLevelsBefore,rankYBefore);Helpers.arrayContains(movedNodes,parentRel)||movedNodes.push(parentRel);var animateNodes=this.DG.GG.getInEdges(parentRel).slice(0);return animateNodes.push(personId),{new:[newNodeId],moved:movedNodes,animate:animateNodes}},convertPlaceholderTo:function(placeholderId,childParams){var positionsBefore=this.DG.positions.slice(0),ranksBefore=this.DG.ranks.slice(0),vertLevelsBefore=this.DG.vertLevel.copy(),rankYBefore=this.DG.rankY.slice(0),numNodesBefore=this.DG.GG.getMaxRealVertexId();if(!this.isPlaceholder(placeholderId))throw"Attemp to access a non-paceholder node as a placeholder";childParams.hasOwnProperty("gender")||(childParams.gender="U"),this.setProperties(placeholderId,childParams),this._heuristics.improvePositioning(ranksBefore,rankYBefore);for(var moved=[this.getParentRelationship(placeholderId)],rank=this.DG.ranks[placeholderId],order=0;order<this.DG.order.order[rank].length-1;order++){var v=this.DG.order.order[rank][order];this.DG.GG.isRelationship(v)&&!Helpers.arrayContains(moved,v)&&moved.push(v)}var movedNodes=this._findMovedNodes(numNodesBefore,positionsBefore,ranksBefore,vertLevelsBefore,rankYBefore);return moved=moved.concat(movedNodes),moved=Helpers.filterUnique(moved),Helpers.removeFirstOccurrenceByValue(moved,placeholderId),{removed:[placeholderId],new:[placeholderId],moved:moved}},removeNodes:function(nodeList){this._debugPrintAll("before");var oldMaxID=this.getMaxNodeId(),removed=nodeList.slice(0);removed.sort();for(var moved=[],i=0;i<nodeList.length;i++)if(this.isRelationship(nodeList[i])){var chHub=this.DG.GG.getOutEdges(nodeList[i])[0];nodeList.push(chHub);for(var pathToParents=this.getPathToParents(nodeList[i]),p=0;p<pathToParents.length;p++)for(var j=0;j<pathToParents[p].length;j++)this.DG.GG.isVirtual(pathToParents[p][j])&&nodeList.push(pathToParents[p][j])}nodeList.sort(function(a,b){return a-b});for(var changedIDSet={},i=nodeList.length-1;i>=0;i--){var v=nodeList[i];this.DG.GG.remove(v),this.DG.order.remove(v,this.DG.ranks[v]),this.DG.ranks.splice(v,1),this.DG.positions.splice(v,1);for(var u=v+1;u<=oldMaxID;u++)changedIDSet.hasOwnProperty(u)?changedIDSet[u]--:changedIDSet[u]=u-1}this.DG.maxRank=Math.max.apply(null,this.DG.ranks),this.DG.GG.validate(),this.DG.vertLevel=this.DG.positionVertically(),this.updateAncestors();for(i=0;i<=this.getMaxNodeId();i++)this.isRelationship(i)&&moved.push(i);return{removed:removed,changedIDSet:changedIDSet,moved:moved}},improvePosition:function(){var positionsBefore=this.DG.positions.slice(0),ranksBefore=this.DG.ranks.slice(0),vertLevelsBefore=this.DG.vertLevel.copy(),rankYBefore=this.DG.rankY.slice(0),numNodesBefore=this.DG.GG.getMaxRealVertexId();return this._heuristics.improvePositioning(ranksBefore,rankYBefore),{moved:this._findMovedNodes(numNodesBefore,positionsBefore,ranksBefore,vertLevelsBefore,rankYBefore)}},updateYPositioning:function(){var positionsBefore=this.DG.positions,ranksBefore=this.DG.ranks,vertLevelsBefore=this.DG.vertLevel,rankYBefore=this.DG.rankY.slice(0),numNodesBefore=this.DG.GG.getMaxRealVertexId();this.DG.rankY=this.DG.computeRankY(ranksBefore,rankYBefore);var movedNodes=this._findMovedNodes(numNodesBefore,positionsBefore,ranksBefore,vertLevelsBefore,rankYBefore,null,!0);return 0==movedNodes.length?{}:{moved:movedNodes}},clearAll:function(){var removedNodes=this._getAllNodes(1),emptyGraph=0==this.DG.GG.getNumVertices(),node0properties=emptyGraph?{}:this.getProperties(0),baseGraph=PedigreeImport.initFromPhenotipsInternal(this._onlyProbandGraph);return this._recreateUsingBaseGraph(baseGraph),this.setProperties(0,node0properties),emptyGraph?{new:[0],makevisible:[0]}:{removed:removedNodes,moved:[0],makevisible:[0]}},redrawAll:function(removedBeforeRedrawList,animateList,newList,ranksBefore){var ranksBefore=ranksBefore||this.DG.ranks.slice(0);this._debugPrintAll("before");for(var baseGraph=this.DG.GG.makeGWithCollapsedMultiRankEdges(),oldRanks=Helpers.clone2DArray(this.DG.order.order),i=oldRanks.length-1;i>=0;i--)oldRanks[i]=oldRanks[i].filter(this.DG.GG.isPerson.bind(this.DG.GG)),0==oldRanks[i].length&&oldRanks.splice(i,1);if(!this._recreateUsingBaseGraph(baseGraph,oldRanks))return{};for(var movedNodes=this._getAllNodes(),probandReRankSize=ranksBefore[0]-this.DG.ranks[0],reRankedDiffFrom0=[],reRanked=[],i=0;i<=this.DG.GG.getMaxRealVertexId();i++)this.DG.GG.isPerson(i)&&(this.DG.ranks[i]!=ranksBefore[i]&&reRanked.push(i),ranksBefore[i]-this.DG.ranks[i]!=probandReRankSize&&reRankedDiffFrom0.push(i));if(reRankedDiffFrom0.length<reRanked.length&&(reRanked=reRankedDiffFrom0),animateList||(animateList=[]),removedBeforeRedrawList||(removedBeforeRedrawList=[]),newList)for(i=0;i<newList.length;i++)Helpers.removeFirstOccurrenceByValue(movedNodes,newList[i]);else newList=[];return this._debugPrintAll("after"),{new:newList,moved:movedNodes,highlight:reRanked,animate:animateList,removed:removedBeforeRedrawList}},stripUnusedProperties:function(){for(var i=0;i<=this.DG.GG.getMaxRealVertexId();i++)this.isPerson(i)&&(this.deleteEmptyProperty(i,"fName"),this.deleteEmptyProperty(i,"lName"),this.deleteEmptyProperty(i,"gestationAge"),this.deleteEmptyProperty(i,"carrierStatus"),this.deleteEmptyProperty(i,"comments"),this.deleteEmptyProperty(i,"disorders"))},deleteEmptyProperty:function(nodeID,propName){this.DG.GG.properties[nodeID].hasOwnProperty(propName)&&("[object Array]"===Object.prototype.toString.call(this.DG.GG.properties[nodeID][propName])&&0==this.DG.GG.properties[nodeID][propName].length?delete this.DG.GG.properties[nodeID][propName]:""==this.DG.GG.properties[nodeID][propName]&&delete this.DG.GG.properties[nodeID][propName])},toJSONObject:function(){this.stripUnusedProperties();var output={};return output.GG=this.DG.GG.serialize(),output.ranks=this.DG.ranks,output.order=this.DG.order.serialize(),output.positions=this.DG.positions,console.log("JSON represenation: "+JSON.stringify(output)),output},fromJSONObject:function(jsonData){var removedNodes=this._getAllNodes();return this.DG.GG=PedigreeImport.initFromPhenotipsInternal(jsonData.GG),this.DG.ranks=jsonData.ranks,this.DG.maxRank=Math.max.apply(null,this.DG.ranks),this.DG.order.deserialize(jsonData.order),this.DG.positions=jsonData.positions,this._updateauxiliaryStructures(),this.screenRankShift=0,{new:this._getAllNodes(),removed:removedNodes}},fromImport:function(importString,importType,importOptions){var removedNodes=this._getAllNodes();if("ped"==importType){baseGraph=PedigreeImport.initFromPED(importString,importOptions.acceptUnknownPhenotypes,importOptions.markEvaluated,importOptions.externalIdMark);if(!this._recreateUsingBaseGraph(baseGraph))return null}else if("BOADICEA"==importType){baseGraph=PedigreeImport.initFromBOADICEA(importString,importOptions.externalIdMark);if(!this._recreateUsingBaseGraph(baseGraph))return null}else if("gedcom"==importType){baseGraph=PedigreeImport.initFromGEDCOM(importString,importOptions.markEvaluated,importOptions.externalIdMark);if(!this._recreateUsingBaseGraph(baseGraph))return null}else if("simpleJSON"==importType){var baseGraph=PedigreeImport.initFromSimpleJSON(importString);if(!this._recreateUsingBaseGraph(baseGraph))return null}return{new:this._getAllNodes(),removed:removedNodes,unRendered:baseGraph.unRenderedNodes}},getPathToParents:function(v){return this.DG.GG.getPathToParents(v)},_recreateUsingBaseGraph:function(baseGraph,suggestedRanks){try{var newDG=new PositionedGraph(baseGraph,this.DG.horizontalPersonSeparationDist,this.DG.horizontalRelSeparationDist,this.DG.maxInitOrderingBuckets,this.DG.maxOrderingIterations,this.DG.maxXcoordIterations,!1,suggestedRanks)}catch(e){return!1}return this.DG=newDG,this._heuristics=new Heuristics(this.DG),this._heuristics.improvePositioning(),!0},_insertVertex:function(type,properties,edgeWeights,inedge,outedge,insertRank,insertOrder){if(null===inedge&&null===outedge)throw"Assertion failed: each node should be connected to at least one other node";if(null!==inedge&&null!==outedge)throw"Assertion failed: not clear which edge crossing to optimize, can only insert one edge";var inedges=null!==inedge?[inedge]:[],outedges=null!==outedge?[outedge]:[],newNodeId=this.DG.GG.insertVertex(type,properties,edgeWeights,inedges,outedges);if(0==insertRank){for(var i=0;i<this.DG.ranks.length;i++)this.DG.ranks[i]++;this.DG.maxRank++,this.DG.order.insertRank(1),insertRank=1}else insertRank>this.DG.maxRank&&(this.DG.maxRank=insertRank,this.DG.order.insertRank(insertRank));this.DG.ranks.splice(newNodeId,0,insertRank),this.DG.order.insertAndShiftAllIdsAboveVByOne(newNodeId,insertRank,insertOrder),this.DG.positions.splice(newNodeId,0,-1/0);var nodeToKeepEdgeStraightTo=null!=inedge?inedge:outedge;return this._heuristics.moveToCorrectPositionAndMoveOtherNodesAsNecessary(newNodeId,nodeToKeepEdgeStraightTo),newNodeId},_updateauxiliaryStructures:function(ranksBefore,rankYBefore){var timer=new Helpers.Timer;this.DG.vertLevel=this.DG.positionVertically(),this.DG.rankY=this.DG.computeRankY(ranksBefore,rankYBefore),this.updateAncestors(),timer.printSinceLast("=== Vertical spacing + ancestors runtime: ")},_getAllNodes:function(minID,maxID){for(var nodes=[],minID=minID||0,maxID=maxID?Math.min(maxID,this.DG.GG.getMaxRealVertexId()):this.DG.GG.getMaxRealVertexId(),i=minID;i<=maxID;i++)this.DG.GG.type[i]!=BaseGraph.TYPE.PERSON&&this.DG.GG.type[i]!=BaseGraph.TYPE.RELATIONSHIP||nodes.push(i);return nodes},_findMovedNodes:function(maxOldID,positionsBefore,ranksBefore,vertLevelsBefore,rankYBefore,consangrBefore,fastCheck){var oldMin=Math.min.apply(Math,positionsBefore);if(Math.min.apply(Math,this.DG.positions)>oldMin){var oldMinNodeID=Helpers.arrayIndexOf(positionsBefore,oldMin);oldMinNodeID>maxOldID&&(oldMinNodeID+=this.DG.GG.getMaxRealVertexId()-maxOldID);for(var shiftAmount=this.DG.positions[oldMinNodeID]-oldMin,i=0;i<this.DG.positions.length;i++)this.DG.positions[i]-=shiftAmount}for(var result={},i=0;i<=maxOldID;i++)if(this.DG.GG.type[i]==BaseGraph.TYPE.RELATIONSHIP||this.DG.GG.type[i]==BaseGraph.TYPE.PERSON){rank=this.DG.ranks[i];if(rankYBefore&&this.DG.rankY[rank]!=rankYBefore[ranksBefore[i]]){this._addNodeAndAssociatedRelationships(i,result,maxOldID);continue}if(this.DG.positions[i]!=positionsBefore[i]){this._addNodeAndAssociatedRelationships(i,result,maxOldID);continue}if(this.DG.GG.type[i]==BaseGraph.TYPE.RELATIONSHIP){if(consangrBefore&&!consangrBefore.hasOwnProperty(i)&&this.DG.consangr.hasOwnProperty(i)){result[i]=!0;continue}if(!fastCheck){var inEdges=this.DG.GG.getInEdges(i);if(inEdges[0]>this.DG.GG.maxRealVertexId||inEdges[1]>this.DG.GG.maxRealVertexId){result[i]=!0;continue}}var parents=this.DG.GG.getParents(i);if(void 0!==vertLevelsBefore.outEdgeVerticalLevel[parents[0]]&&void 0!==vertLevelsBefore.outEdgeVerticalLevel[parents[1]]&&(vertLevelsBefore.outEdgeVerticalLevel[parents[0]][i].verticalLevel!=this.DG.vertLevel.outEdgeVerticalLevel[parents[0]][i].verticalLevel||vertLevelsBefore.outEdgeVerticalLevel[parents[1]][i].verticalLevel!=this.DG.vertLevel.outEdgeVerticalLevel[parents[1]][i].verticalLevel)){result[i]=!0;continue}var childHub=this.DG.GG.getRelationshipChildhub(i);if(void 0!==vertLevelsBefore.childEdgeLevel[childHub]&&vertLevelsBefore.childEdgeLevel[childHub]!=this.DG.vertLevel.childEdgeLevel[childHub]){result[i]=!0;continue}}}for(i=this.DG.GG.getMaxRealVertexId()+1;i<=this.DG.GG.getNumVertices();i++){var rank=this.DG.ranks[i];if(rankYBefore&&rankYBefore.length>=rank&&this.DG.rankY[rank]!=rankYBefore[rank]){var relationship=this.DG.GG.downTheChainUntilNonVirtual(i);relationship<=maxOldID&&(result[relationship]=!0)}}var resultArray=[];for(var node in result)result.hasOwnProperty(node)&&resultArray.push(parseInt(node));return resultArray},_addNodeAndAssociatedRelationships:function(node,addToSet,maxOldID){if(addToSet[node]=!0,this.DG.GG.type[node]==BaseGraph.TYPE.PERSON){var inEdges=this.DG.GG.getInEdges(node);if(inEdges.length>0){var parentChildhub=inEdges[0],parentRelationship=this.DG.GG.getInEdges(parentChildhub)[0];parentRelationship<=maxOldID&&(addToSet[parentRelationship]=!0)}for(var outEdges=this.DG.GG.getOutEdges(node),i=0;i<outEdges.length;i++)outEdges[i]<=maxOldID&&(addToSet[outEdges[i]]=!0)}},_addMultiRankEdge:function(personId,relationshipId,_weight){var weight=_weight||1,rankPerson=this.DG.ranks[personId],rankRelationship=this.DG.ranks[relationshipId];if(rankPerson>rankRelationship-2)throw"Assertion failed: attempt to make a multi-rank edge between non-multirank ranks";for(var otherpartner=this.DG.GG.getInEdges(relationshipId)[0],order_rel=(this.DG.order.vOrder[personId],this.DG.order.vOrder[relationshipId]),prevPieceOrder=this.DG.positions[otherpartner]<this.DG.positions[relationshipId]?order_rel+1:order_rel,prevPieceId=this._insertVertex(BaseGraph.TYPE.VIRTUALEDGE,{},weight,null,relationshipId,rankRelationship,prevPieceOrder),rankNext=rankRelationship;--rankNext>rankPerson;){for(var prevNodeX=this.DG.positions[prevPieceId],orderToMakeEdgeStraight=this.DG.order.order[rankNext].length,o=0;o<this.DG.order.order[rankNext].length;o++)if(this.DG.positions[this.DG.order.order[rankNext][o]]>=prevNodeX){orderToMakeEdgeStraight=o;break}console.log("adding piece @ rank: "+rankNext+" @ order "+orderToMakeEdgeStraight),prevPieceId=this._insertVertex(BaseGraph.TYPE.VIRTUALEDGE,{},weight,null,prevPieceId,rankNext,orderToMakeEdgeStraight)}this.DG.GG.addEdge(personId,prevPieceId,weight)},_findBestInsertPosition:function(rank,edgeToV,preferLeft,_fromOrder,_toOrder){if(0==rank||rank>this.DG.maxRank)return 0;var edgeToRank=this.DG.ranks[edgeToV],edgeToOrder=this.DG.order.vOrder[edgeToV];if(edgeToRank==rank&&this.isPerson(edgeToV))return this._findBestRelationshipPosition(edgeToV,preferLeft);var bestInsertOrder=0,bestCrossings=1/0,bestDistance=1/0,crossingChildhubEdgesPenalty=!1;this.DG.GG.type[edgeToV]==BaseGraph.TYPE.CHILDHUB&&(crossingChildhubEdgesPenalty=!0);for(var desiredOrder=0,edgeToX=this.DG.positions[edgeToV],o=0;o<this.DG.order.order[rank].length;o++){var uAtPos=this.DG.order.order[rank][o];if(!(this.DG.positions[uAtPos]<edgeToX))break;desiredOrder=o+1}this.DG.GG.type[edgeToV]==BaseGraph.TYPE.CHILDHUB&&rank>edgeToRank&&this.DG.GG.getOutEdges(edgeToV).length>0&&(desiredOrder=this._findRightmostChildPosition(edgeToV)+1);for(var fromOrder=_fromOrder?Math.max(_fromOrder,0):0,toOrder=_toOrder?Math.min(_toOrder,this.DG.order.order[rank].length):this.DG.order.order[rank].length,o=fromOrder;o<=toOrder;o++){if(o>0&&o<this.DG.order.order[rank].length){for(var leftNodePos=o-1;leftNodePos>0&&this.DG.GG.isVirtual(this.DG.order.order[rank][leftNodePos]);)leftNodePos--;for(rightNodePos=o;rightNodePos<this.DG.order.order[rank].length-1&&this.DG.GG.isVirtual(this.DG.order.order[rank][rightNodePos]);)rightNodePos--;var nodeToTheLeft=this.DG.order.order[rank][leftNodePos],nodeToTheRight=this.DG.order.order[rank][rightNodePos];if(this.isPerson(nodeToTheLeft)&&this.isPerson(nodeToTheRight)&&this.DG.GG.getProducingRelationship(nodeToTheLeft)==this.DG.GG.getProducingRelationship(nodeToTheRight)){var twinGroupId1=this.DG.GG.getTwinGroupId(nodeToTheLeft),twinGroupId2=this.DG.GG.getTwinGroupId(nodeToTheRight);if(null!==twinGroupId1&&twinGroupId1==twinGroupId2)continue}}var numCrossings=this._edgeCrossingsByFutureEdge(rank,o-.5,edgeToRank,edgeToOrder,crossingChildhubEdgesPenalty,edgeToV);(numCrossings<bestCrossings||numCrossings==bestCrossings&&Math.abs(o-desiredOrder)<=bestDistance)&&(bestInsertOrder=o,bestCrossings=numCrossings,bestDistance=Math.abs(o-desiredOrder))}return bestInsertOrder},_findRightmostChildPosition:function(vertex){return this._heuristics.analizeChildren(vertex).rightMostChildOrder},_edgeCrossingsByFutureEdge:function(newVRank,newVOrder,existingURank,existingUOrder,crossingChildhubEdgesPenalty,existingU){var rankFrom=Math.min(newVRank,existingURank),rankTo=Math.max(newVRank,existingURank),orderFrom=newVRank<existingURank?newVOrder:existingUOrder,orderTo=newVRank<existingURank?existingUOrder:newVOrder,vSibglingInfo=void 0;if(this.DG.GG.isChildhub(existingU)&&newVRank>existingURank&&this.DG.GG.getOutEdges(existingU).length>0&&(vSibglingInfo=this._heuristics.analizeChildren(existingU)).numWithTwoPartners<vSibglingInfo.orderedChildren.length){var okPosition=!1;if(newVOrder>0){var leftNeighbour=this.DG.order.order[newVRank][Math.floor(newVOrder)];1==(neighbourInEdges=this.DG.GG.getInEdges(leftNeighbour)).length&&neighbourInEdges[0]==existingU&&(okPosition=!0)}if(newVOrder<this.DG.order.order[newVRank].length-1){var rightNeighbour=this.DG.order.order[newVRank][Math.ceil(newVOrder)],neighbourInEdges=this.DG.GG.getInEdges(rightNeighbour);1==neighbourInEdges.length&&neighbourInEdges[0]==existingU&&(okPosition=!0)}if(!okPosition)return 1/0}var crossings=0;if(rankFrom==rankTo)throw"TODO: probably not needed";for(var verticesAtRankTo=this.DG.order.order[rankTo],ord=0;ord<verticesAtRankTo.length;ord++)if(ord!=orderTo)for(var vertex=verticesAtRankTo[ord],inEdges=this.DG.GG.getInEdges(vertex),len=inEdges.length,j=0;j<len;j++){var target=inEdges[j],penalty=1;if(crossingChildhubEdgesPenalty&&this.DG.GG.isChildhub(target)&&(penalty=1e5,vSibglingInfo)){var targetChildren=this._heuristics.analizeChildren(target);targetChildren.leftMostChildOrder<vSibglingInfo.rightMostChildOrder&&targetChildren.rightMostChildOrder>vSibglingInfo.leftMostChildOrder&&(penalty=1)}orderTarget=this.DG.order.vOrder[target];(rankTarget=this.DG.ranks[target])==rankTo?(ord<orderTo&&orderTarget>orderTo||ord>orderTo&&orderTarget<orderTo)&&(crossings+=2):(ord<orderTo&&orderTarget>orderFrom||ord>orderTo&&orderTarget<orderFrom)&&(crossings+=penalty)}for(var verticesAtNewRank=this.DG.order.order[newVRank],ord=0;ord<verticesAtNewRank.length;ord++)if(ord!=newVOrder)for(var vertex=verticesAtNewRank[ord],outEdges=this.DG.GG.getOutEdges(vertex),len=outEdges.length,j=0;j<len;j++){var target=outEdges[j],orderTarget=this.DG.order.vOrder[target],rankTarget=this.DG.ranks[target];rankTarget==newVRank&&(newVOrder<ord&&newVOrder>orderTarget||newVOrder>ord&&newVOrder<orderTarget)&&(crossings+=.1)}return crossings},_findBestRelationshipPosition:function(v,preferLeft,u){for(var rank=this.DG.ranks[v],orderR=this.DG.order.order[rank],isTwin=null!=this.DG.GG.getTwinGroupId(v),vOrder=this.DG.order.vOrder[v],penaltyBelow=[],penaltySameRank=[],o=0;o<=orderR.length;o++)penaltyBelow[o]=0,penaltySameRank[o]=0;for(o=0;o<orderR.length;o++){node=orderR[o];if(this.isRelationship(node)){var childrenInfo=this._heuristics.analizeChildren(node);childrenInfo.leftMostHasLParner&&(penaltyBelow[o]+=1,penaltyBelow[o-1]+=.25),childrenInfo.rightMostHasRParner&&(penaltyBelow[o+1]+=1,penaltyBelow[o+2]+=.25)}}for(o=0;o<orderR.length;o++){node=orderR[o];if(this.isRelationship(node))for(var relOrder=this.DG.order.vOrder[node],parents=this.DG.GG.getInEdges(node),p=0;p<parents.length;p++){var parent=parents[p];if(parent!=v&&this.DG.ranks[parent]==rank&&parent!=u)for(var parentOrder=this.DG.order.vOrder[parent],from=parentOrder>relOrder?relOrder+1:parentOrder+1,to=parentOrder>relOrder?parentOrder:relOrder,j=from;j<=to;j++)penaltySameRank[j]=1/0}}for(o=0;o<orderR.length;o++)if(o!=vOrder){var node=orderR[o];if(this.isPerson(node)){var allTwins=this.getAllTwinsSortedByOrder(node);if(allTwins.length>1){for(var leftMostTwinOrder=this.DG.order.vOrder[allTwins[0]],rightMostTwinOrder=this.DG.order.vOrder[allTwins[allTwins.length-1]],j=leftMostTwinOrder+1;j<=rightMostTwinOrder;j++)penaltySameRank[j]=1/0;o=rightMostTwinOrder}if(null!=this.DG.GG.getProducingRelationship(node))if(o<vOrder)for(j=0;j<=o;j++)penaltySameRank[j]++;else for(j=o+1;j<=orderR.length;j++)penaltySameRank[j]++}}if(console.log("Insertion same rank penalties: "+Helpers.stringifyObject(penaltySameRank)),console.log("Insertion below penalties:     "+Helpers.stringifyObject(penaltyBelow)),void 0===u){if(preferLeft&&0==vOrder)return 0;var partnerInfo=this.DG._findLeftAndRightPartners(v),numLeftOf=partnerInfo.leftPartners.length,numRightOf=partnerInfo.rightPartners.length;if(console.log("v: "+v+", vOrder: "+vOrder+", numL: "+numLeftOf+", numR: "+numRightOf),!isTwin&&0==numLeftOf&&(preferLeft||numRightOf>0))return vOrder;if(!isTwin&&0==numRightOf)return vOrder+1;for(var bestPosition=vOrder+1,bestPenalty=1/0,o=0;o<=orderR.length;o++){penalty=penaltyBelow[o]+penaltySameRank[o];o<=vOrder?(penalty+=numLeftOf+(vOrder-o),preferLeft?penalty-=.5:penalty+=.5):penalty+=numRightOf+(o-vOrder-1),penalty<bestPenalty&&(bestPenalty=penalty,bestPosition=o)}return bestPosition}if(this.DG.order.vOrder[v]>this.DG.order.vOrder[u]){var tmp=u;u=v,v=tmp}var orderV=this.DG.order.vOrder[v],orderU=this.DG.order.vOrder[u],partnerInfoV=this.DG._findLeftAndRightPartners(v),numRightOf=partnerInfoV.rightPartners.length,partnerInfoU=this.DG._findLeftAndRightPartners(u),numLeftOf=partnerInfoU.leftPartners.length;if(0==numRightOf&&numLeftOf>0)return orderV+1;if(numRightOf>0&&0==numLeftOf)return orderU;for(var bestPosition=orderV+1,bestPenalty=1/0,o=orderV+1;o<=orderU;o++){for(var penalty=penaltyBelow[o]+penaltySameRank[o],p=0;p<partnerInfoV.rightPartners.length;p++){partner=partnerInfoV.rightPartners[p];o<=this.DG.order.vOrder[partner]&&penalty++}for(p=0;p<partnerInfoU.leftPartners.length;p++){var partner=partnerInfoU.leftPartners[p];o>this.DG.order.vOrder[partner]&&penalty++}penalty<=bestPenalty&&(bestPenalty=penalty,bestPosition=o)}return bestPosition},_getAllPersonsOfGenders:function(validGendersSet,excludeAdoptedOut){for(i=0;i<validGendersSet.length;i++)if(validGendersSet[i]=validGendersSet[i].toLowerCase(),"u"!=validGendersSet[i]&&"m"!=validGendersSet[i]&&"f"!=validGendersSet[i]&&"o"!=validGendersSet[i])return console.log("ERROR: Invalid gender: "+validGendersSet[i]),[];for(var result=[],i=0;i<=this.DG.GG.getMaxRealVertexId();i++)if(this.isPerson(i)&&!this.isPersonGroup(i)&&!(this.isPlaceholder(i)||excludeAdoptedOut&&this.isAdoptedOut(i))){var gender=this.getProperties(i).gender.toLowerCase();Helpers.arrayContains(validGendersSet,gender)&&result.push(i)}return result}},Heuristics=function(drawGraph){this.DG=drawGraph},Heuristics.prototype={swapPartnerToBringToSideIfPossible:function(personId){if(null===this.DG.GG.getTwinGroupId(personId)){var rank=this.DG.ranks[personId],order=this.DG.order.vOrder[personId];if(0!=order&&order!=this.DG.order.order[rank].length-1){var parnetships=this.DG.GG.getAllRelationships(personId);if(1==parnetships.length){var relationship=parnetships[0],partners=(this.DG.order.vOrder[relationship],this.DG.GG.getParents(relationship)),partnerId=partners[0]==personId?partners[1]:partners[0];if(1==this.DG.GG.getOutEdges(partnerId).length&&this.DG.ranks[personId]==this.DG.ranks[partnerId]){var partnerOrder=this.DG.order.vOrder[partnerId];if(!(partnerOrder!=order-2&&partnerOrder!=order+2||0!=this.DG.GG.getInEdges(personId).length&&0!=this.DG.GG.getInEdges(partnerId).length)){var childhubId=this.DG.GG.getOutEdges(relationship)[0];if(0!=this.DG.GG.getOutEdges(childhubId).length){var toTheLeft=order<partnerOrder,childrenPartners=this.analizeChildren(childhubId);(toTheLeft&&childrenPartners.leftMostHasLParner&&!childrenPartners.rightMostHasRParner||!toTheLeft&&childrenPartners.rightMostHasRParner&&!childrenPartners.leftMostHasLParner||2==order&&childrenPartners.rightMostHasRParner||order==this.DG.order.order[rank].length-3&&childrenPartners.leftMostHasLParner)&&this.swapPartners(personId,partnerId,relationship)}}}}}}},swapTwinsToBringToSideIfPossible:function(personId){this.DG.GG.getTwinGroupId(personId)},analizeChildren:function(childhubId){if(this.DG.GG.isRelationship(childhubId)&&(childhubId=this.DG.GG.getOutEdges(childhubId)[0]),!this.DG.GG.isChildhub(childhubId))throw"Assertion failed: applying analizeChildren() not to a childhub";var children=this.DG.GG.getOutEdges(childhubId);if(0!=children.length){var havePartners={},numWithPartners=0,numWithTwoPartners=0,leftMostChildId=void 0,leftMostChildOrder=1/0,leftMostHasLParner=!1,rightMostChildId=void 0,rightMostChildOrder=-1/0,rightMostHasRParner=!1,onlyPlaceholder=!1;1==children.length&&this.DG.GG.isPlaceholder(children[0])&&(onlyPlaceholder=!0);for(var i=0;i<children.length;i++){var childId=children[i],order=this.DG.order.vOrder[childId];order<leftMostChildOrder&&(leftMostChildId=childId,leftMostChildOrder=order,leftMostHasLParner=this.hasParnerBetweenOrders(childId,0,order-1)),order>rightMostChildOrder&&(rightMostChildId=childId,rightMostChildOrder=order,rightMostHasRParner=this.hasParnerBetweenOrders(childId,order+1,1/0)),this.DG.GG.getOutEdges(childId).length>0&&(havePartners[childId]=!0,numWithPartners++,this.DG.GG.getOutEdges(childId).length>1&&numWithTwoPartners++)}return{leftMostHasLParner:leftMostHasLParner,leftMostChildId:leftMostChildId,leftMostChildOrder:leftMostChildOrder,rightMostHasRParner:rightMostHasRParner,rightMostChildId:rightMostChildId,rightMostChildOrder:rightMostChildOrder,withPartnerSet:havePartners,numWithPartners:numWithPartners,numWithTwoPartners:numWithTwoPartners,orderedChildren:this.DG.order.sortByOrder(children),onlyPlaceholder:onlyPlaceholder}}},hasParnerBetweenOrders:function(personId,minOrder,maxOrder){for(var rank=this.DG.ranks[personId],outEdges=(this.DG.order.vOrder[personId],this.DG.GG.getOutEdges(personId)),i=0;i<outEdges.length;i++){var relationship=outEdges[i];if(this.DG.ranks[relationship]==rank){var relOrder=this.DG.order.vOrder[relationship];if(relOrder>=minOrder&&relOrder<=maxOrder)return!0}}return!1},swapPartners:function(partner1,partner2,relationshipId){var rank=this.DG.ranks[partner1];if(this.DG.ranks[partner2]!=rank||this.DG.ranks[relationshipId]!=rank)throw"Assertion failed: swapping nodes of different ranks";var order1=this.DG.order.vOrder[partner1],order2=this.DG.order.vOrder[partner2],orderRel=this.DG.order.vOrder[relationshipId];if(order1>order2){var tmpOrder=order1,tmpId=partner1;order1=order2,partner1=partner2,order2=tmpOrder,partner2=tmpId}if(order1+1==orderRel&&orderRel+1==order2){this.DG.order.exchange(rank,order1,order2);var widthDecrease=this.DG.GG.getVertexWidth(partner1)-this.DG.GG.getVertexWidth(partner2),pos2=this.DG.positions[partner2];this.DG.positions[partner2]=this.DG.positions[partner1],this.DG.positions[partner1]=pos2-widthDecrease,this.DG.positions[relationshipId]-=widthDecrease}},moveSiblingPlusPartnerToOrder:function(personId,partnerId,partnershipId,newOrder){var rank=this.DG.ranks[partnerId],partnerOrder=this.DG.order.vOrder[partnerId],personOrder=this.DG.order.vOrder[personId],relOrder=this.DG.order.vOrder[partnershipId],moveOrders=newOrder-personOrder,moveDistance=this.DG.positions[this.DG.order.order[rank][newOrder]]-this.DG.positions[personId],moveRight=newOrder>personOrder,firstSibling=moveRight?this.DG.order.order[rank][personOrder+1]:this.DG.order.order[rank][personOrder-1],moveOtherDist=this.DG.positions[firstSibling]-this.DG.positions[partnerId];this.DG.order.move(rank,personOrder,moveOrders),this.DG.order.move(rank,relOrder,moveOrders),this.DG.order.move(rank,partnerOrder,moveOrders),this.DG.positions[personId]+=moveDistance,this.DG.positions[partnerId]+=moveDistance,this.DG.positions[partnershipId]+=moveDistance;for(var minMovedOrder=moveRight?partnerOrder:newOrder+3,maxMovedOrder=moveRight?newOrder-3:partnerOrder,o=minMovedOrder;o<=maxMovedOrder;o++){var node=this.DG.order.order[rank][o];console.log("moving: "+node),this.DG.positions[node]-=moveOtherDist}},swapBeforeParentsToBringToSideIfPossible:function(personId){var parnetships=this.DG.GG.getAllRelationships(personId);if(1==parnetships.length){var relationshipId=parnetships[0],partners=this.DG.GG.getParents(relationshipId),partnerId=partners[0]==personId?partners[1]:partners[0];if(0!=this.DG.GG.getInEdges(partnerId).length&&this.DG.ranks[personId]==this.DG.ranks[partnerId]&&!(this.DG.GG.getOutEdges(partnerId).length>1)){var order=this.DG.order.vOrder[personId],partnerOrder=this.DG.order.vOrder[partnerId];if(partnerOrder==order-2||partnerOrder==order+2){var toTheLeft=order<partnerOrder,partnerChildhubId=this.DG.GG.getInEdges(partnerId)[0],partnerSibglingInfo=this.analizeChildren(partnerChildhubId);if(partnerSibglingInfo.orderedChildren.length>1){if(partnerSibglingInfo.leftMostChildId==partnerId)return void(toTheLeft||this.swapPartners(personId,partnerId,relationshipId));if(partnerSibglingInfo.rightMostChildId==partnerId)return void(toTheLeft&&this.swapPartners(personId,partnerId,relationshipId))}var partnerParents=this.DG.GG.getInEdges(this.DG.GG.getInEdges(partnerChildhubId)[0]),order0=this.DG.order.vOrder[partnerParents[0]],order1=this.DG.order.vOrder[partnerParents[1]],leftParent=order0>order1?partnerParents[1]:partnerParents[0],rightParent=order0>order1?partnerParents[0]:partnerParents[1];console.log("parents: "+Helpers.stringifyObject(partnerParents));var numLeftPartners=this.DG.GG.getOutEdges(leftParent).length,numRightPartners=this.DG.GG.getOutEdges(rightParent).length;if(console.log("num left: "+numLeftPartners+", numRight: "+numRightPartners),!(numLeftPartners>1&&numRightPartners>1)){if(1==partnerSibglingInfo.orderedChildren.length){if(1==numLeftPartners&&1==numRightPartners)return;return 1!=numLeftPartners||toTheLeft||this.swapPartners(personId,partnerId,relationshipId),void(1==numRightPartners&&toTheLeft&&this.swapPartners(personId,partnerId,relationshipId))}var childHubBelow=this.DG.GG.getRelationshipChildhub(relationshipId);if(!(this.analizeChildren(childHubBelow).numWithPartners>0)){if(1==numRightPartners&&!partnerSibglingInfo.rightMostHasRParner)for(c=partnerSibglingInfo.orderedChildren.length-1;c>=0;c--){if((sibling=partnerSibglingInfo.orderedChildren[c])==partnerId)return toTheLeft&&this.swapPartners(personId,partnerId,relationshipId),void this.moveSiblingPlusPartnerToOrder(personId,partnerId,relationshipId,partnerSibglingInfo.rightMostChildOrder);if(partnerSibglingInfo.withPartnerSet.hasOwnProperty(sibling))break}if(1==numLeftPartners&&!partnerSibglingInfo.leftMostHasLParner)for(var c=0;c<partnerSibglingInfo.orderedChildren.length;c++){var sibling=partnerSibglingInfo.orderedChildren[c];if(sibling==partnerId)return toTheLeft||this.swapPartners(personId,partnerId,relationshipId),void this.moveSiblingPlusPartnerToOrder(personId,partnerId,relationshipId,partnerSibglingInfo.leftMostChildOrder);if(partnerSibglingInfo.withPartnerSet.hasOwnProperty(sibling))break}}}}}}},improvePositioning:function(ranksBefore,rankYBefore){for(var timer=new Helpers.Timer,parent=0;parent<=this.DG.GG.getMaxRealVertexId();parent++)if(this.DG.GG.isPerson(parent)){for(var rank=this.DG.ranks[parent],order=this.DG.order.vOrder[parent],outEdges=this.DG.GG.getOutEdges(parent),sameRankToTheLeft=0,sameRankToTheRight=0,multiRankEdges=[],i=0;i<outEdges.length;i++){var node=outEdges[i];this.DG.ranks[node]!=rank?multiRankEdges.push(node):this.DG.order.vOrder[node]<order?sameRankToTheLeft++:sameRankToTheRight++}if(0!=multiRankEdges.length){var _this=this;byXcoord=function(v1,v2){var rel1=_this.DG.GG.downTheChainUntilNonVirtual(v1),rel2=_this.DG.GG.downTheChainUntilNonVirtual(v2),position1=_this.DG.positions[rel1],position2=_this.DG.positions[rel2],parentPos=_this.DG.positions[parent];return position1>=parentPos&&position2>=parentPos?position2-position1:position1-position2},multiRankEdges.sort(byXcoord),console.log("multi-rank edges: "+Helpers.stringifyObject(multiRankEdges));for(var p=0;p<multiRankEdges.length;p++){var firstOnPath=multiRankEdges[p],relNode=this.DG.GG.downTheChainUntilNonVirtual(firstOnPath),weight=this.DG.GG.removeEdge(parent,firstOnPath),newNodeId=this.DG.GG.insertVertex(BaseGraph.TYPE.VIRTUALEDGE,{},weight,[parent],[firstOnPath]);this.DG.ranks.splice(newNodeId,0,rank);var insertToTheRight=!(this.DG.positions[relNode]<this.DG.positions[parent]);this.DG.positions[relNode]==this.DG.positions[parent]&&sameRankToTheRight>0&&0==sameRankToTheLeft&&1==multiRankEdges.length&&(insertToTheRight=!1);var parentOrder=this.DG.order.vOrder[parent],newOrder=insertToTheRight?parentOrder+1:parentOrder;if(insertToTheRight){for(;newOrder<this.DG.order.order[rank].length&&this.DG.positions[firstOnPath]>this.DG.positions[this.DG.order.order[rank][newOrder]];)newOrder++;var toTheLeft=this.DG.order.order[rank][newOrder-1],toTheRight=this.DG.order.order[rank][newOrder];this.DG.GG.isRelationship(toTheLeft)&&this.DG.GG.isPerson(toTheRight)&&this.DG.GG.hasEdge(toTheRight,toTheLeft)&&1==this.DG.GG.getOutEdges(toTheRight).length&&newOrder++,this.DG.GG.isRelationship(toTheRight)&&this.DG.GG.isPerson(toTheLeft)&&this.DG.GG.hasEdge(toTheLeft,toTheRight)&&1==this.DG.GG.getOutEdges(toTheLeft).length&&newOrder--}else{for(;newOrder>0&&this.DG.positions[firstOnPath]<this.DG.positions[this.DG.order.order[rank][newOrder-1]];)newOrder--;var toTheLeft=this.DG.order.order[rank][newOrder-1],toTheRight=this.DG.order.order[rank][newOrder];this.DG.GG.isRelationship(toTheRight)&&this.DG.GG.isPerson(toTheLeft)&&this.DG.GG.hasEdge(toTheLeft,toTheRight)&&1==this.DG.GG.getOutEdges(toTheLeft).length&&newOrder--,this.DG.GG.isRelationship(toTheLeft)&&this.DG.GG.isPerson(toTheRight)&&this.DG.GG.hasEdge(toTheRight,toTheLeft)&&1==this.DG.GG.getOutEdges(toTheRight).length&&newOrder++}this.DG.order.insertAndShiftAllIdsAboveVByOne(newNodeId,rank,newOrder),this.DG.positions.splice(newNodeId,0,-1/0);var nodeToKeepEdgeStraightTo=firstOnPath;this.moveToCorrectPositionAndMoveOtherNodesAsNecessary(newNodeId,nodeToKeepEdgeStraightTo),!0}}}this.optimizeLongEdgePlacement(),timer.printSinceLast("=== Long edge handling runtime: ");for(var xcoord=new XCoord(this.DG.positions,this.DG),v=0;v<=this.DG.GG.getMaxRealVertexId();v++)if(this.DG.GG.isRelationship(v)){var childhub=this.DG.GG.getRelationshipChildhub(v),relX=xcoord.xcoord[v];(childhubX=xcoord.xcoord[childhub])!=relX&&(improved=xcoord.moveNodeAsCloseToXAsPossible(childhub,relX))}for(v=0;v<=this.DG.GG.getMaxRealVertexId();v++)if(this.DG.GG.isChildhub(v)){var children=this.DG.GG.getOutEdges(v);if(!(children.length<2)){for(var orderedChildren=this.DG.order.sortByOrder(children),i=orderedChildren.length-1;i>=0;i--)if(0==i||this.DG.GG.getOutEdges(orderedChildren[i]).length>0){for(j=i+1;j<orderedChildren.length;j++)xcoord.shiftLeftOneVertex(orderedChildren[j],1/0);break}for(i=0;i<orderedChildren.length;i++)if(i==orderedChildren.length-1||this.DG.GG.getOutEdges(orderedChildren[i]).length>0){for(var j=i-1;j>=0;j--)xcoord.shiftRightOneVertex(orderedChildren[j],1/0);break}}}this._compactGraph(xcoord,5);for(var orderedRelationships=this.DG.order.getLeftToRightTopToBottomOrdering(BaseGraph.TYPE.RELATIONSHIP,this.DG.GG),iter=0,improved=!0;improved&&iter<20;){improved=!1,iter++;for(k=0;k<orderedRelationships.length;k++){var v=orderedRelationships[k],parents=this.DG.GG.getInEdges(v),childhub=this.DG.GG.getRelationshipChildhub(v),relX=xcoord.xcoord[v],childhubX=xcoord.xcoord[childhub],childInfo=this.analizeChildren(childhub),misalignment=0;if(1==childInfo.orderedChildren.length){var childId=childInfo.orderedChildren[0];if(xcoord.xcoord[childId]==childhubX)continue;if(improved=xcoord.moveNodeAsCloseToXAsPossible(childId,childhubX),xcoord.xcoord[childId]==childhubX)continue;misalignment=xcoord.xcoord[childId]-childhubX}else{var positionInfo=this._computeDesiredChildhubLocation(childInfo,xcoord);if(positionInfo.minPreferred<=childhubX&&childhubX<=positionInfo.maxPreferred)continue;var needToShift=childhubX-(childhubX>positionInfo.maxPreferred?positionInfo.maxPreferred:positionInfo.minPreferred);if(0==childInfo.numWithPartners)if(needToShift<0){var leftMost=childInfo.leftMostChildId,leftSlack=xcoord.getSlackOnTheLeft(leftMost);if((haveSlack=Math.min(Math.abs(needToShift),leftSlack))>0){for(i=0;i<childInfo.orderedChildren.length;i++)xcoord.xcoord[childInfo.orderedChildren[i]]-=haveSlack;improved=!0,needToShift+=haveSlack}}else{var rightMost=childInfo.rightMostChildId,rightSlack=xcoord.getSlackOnTheRight(rightMost),haveSlack=Math.min(needToShift,rightSlack);if(haveSlack>0){for(i=0;i<childInfo.orderedChildren.length;i++)xcoord.xcoord[childInfo.orderedChildren[i]]+=haveSlack;improved=!0,needToShift-=haveSlack}}misalignment=-needToShift}if(0!=misalignment){var leftParent=xcoord.xcoord[parents[0]]<xcoord.xcoord[parents[1]]?parents[0]:parents[1],rightParent=xcoord.xcoord[parents[0]]<xcoord.xcoord[parents[1]]?parents[1]:parents[0],shiftList=[v,childhub];this.DG.order.vOrder[leftParent]!=this.DG.order.vOrder[v]-1||this.DG.GG.isVirtual(leftParent)||(misalignment>0||xcoord.getSlackOnTheLeft(v)<-misalignment)&&shiftList.unshift(leftParent),this.DG.order.vOrder[rightParent]!=this.DG.order.vOrder[v]+1||this.DG.GG.isVirtual(rightParent)||(misalignment<0||xcoord.getSlackOnTheRight(v)<misalignment)&&shiftList.push(rightParent),(noUpSet={})[v]=!0;var affectedInfoParentShift=this._findAffectedSet(shiftList,{},noUpSet,Helpers.toObjectWithTrue(shiftList),Helpers.toObjectWithTrue(childInfo.orderedChildren),misalignment,xcoord,!0,!1,7,3),shiftList=childInfo.orderedChildren,forbiddenList=[v,childhub],affectedInfoChildShift=this._findAffectedSet(shiftList,{},Helpers.toObjectWithTrue(childInfo.orderedChildren),{},Helpers.toObjectWithTrue(forbiddenList),-misalignment,xcoord,!0,!1,7,3),parentShiftAcceptable=this._isShiftSizeAcceptable(affectedInfoParentShift,!1,7,3),childShiftAcceptable=this._isShiftSizeAcceptable(affectedInfoChildShift,!1,7,3);if(parentShiftAcceptable||childShiftAcceptable)if(improved=!0,!parentShiftAcceptable||childShiftAcceptable&&!this._isShiftBetter(affectedInfoParentShift,affectedInfoChildShift))for(var nodes=affectedInfoChildShift.nodes,i=0;i<nodes.length;i++)xcoord.xcoord[nodes[i]]-=misalignment;else for(var nodes=affectedInfoParentShift.nodes,i=0;i<nodes.length;i++)xcoord.xcoord[nodes[i]]+=misalignment;else{if(misalignment<0){var leftShiftingNode=this.DG.order.vOrder[leftParent]==this.DG.order.vOrder[v]-1?leftParent:v;if(0==(smallShift=Math.max(-xcoord.getSlackOnTheLeft(leftShiftingNode),misalignment))||smallShift==misalignment)continue}else{var rightShiftingNode=this.DG.order.vOrder[rightParent]==this.DG.order.vOrder[v]+1?rightParent:v,smallShift=Math.min(xcoord.getSlackOnTheLeft(rightShiftingNode),misalignment);if(0==smallShift||smallShift==misalignment)continue}shiftList=[v,childhub];this.DG.order.vOrder[leftParent]!=this.DG.order.vOrder[v]-1||this.DG.GG.isVirtual(leftParent)||shiftList.unshift(leftParent),this.DG.order.vOrder[rightParent]!=this.DG.order.vOrder[v]+1||this.DG.GG.isVirtual(rightParent)||shiftList.push(rightParent),(noUpSet={})[v]=!0;affectedInfoParentShift=this._findAffectedSet(shiftList,{},noUpSet,Helpers.toObjectWithTrue(shiftList),Helpers.toObjectWithTrue(childInfo.orderedChildren),smallShift,xcoord,!0,!1,3,2);if(this._isShiftSizeAcceptable(affectedInfoParentShift,!1,3,2))for(var nodes=affectedInfoParentShift.nodes,i=0;i<nodes.length;i++)xcoord.xcoord[nodes[i]]+=smallShift;else;}}}}this._compactGraph(xcoord);for(var iter=0,improved=!0;improved&&iter<20;){improved=!1,iter++;for(var k=0;k<orderedRelationships.length;k++){var v=orderedRelationships[k],parents=this.DG.GG.getInEdges(v),orderedParents=this.DG.order.sortByOrder(parents);if(2==Math.abs(this.DG.order.vOrder[parents[0]]-this.DG.order.vOrder[parents[1]])){var leftParentRightSide=xcoord.getRightEdge(orderedParents[0]),rightParentLeftSide=xcoord.getLeftEdge(orderedParents[1]),relX=xcoord.xcoord[v],midX=Math.floor((leftParentRightSide+rightParentLeftSide)/2);if(relX!=midX){var shiftSize=midX-relX,shiftList=[v,childhub=this.DG.GG.getRelationshipChildhub(v)],noUpSet={};noUpSet[v]=!0;var affectedInfo=this._findAffectedSet(shiftList,{},noUpSet,{},{},shiftSize,xcoord,!0,!1,5,3,this.DG.ranks[v]);if(this._isShiftSizeAcceptable(affectedInfo,!1,5,3)&&affectedInfo.minAffectedRank>this.DG.ranks[v]){for(var nodes=affectedInfo.nodes,i=0;i<nodes.length;i++)xcoord.xcoord[nodes[i]]+=shiftSize;improved=!0}}}}}this.DG.positions=xcoord.xcoord,timer.printSinceLast("=== Improvement runtime: "),this.DG.vertLevel=this.DG.positionVertically(),this.DG.rankY=this.DG.computeRankY(ranksBefore,rankYBefore),timer.printSinceLast("=== Vertical spacing runtime: ")},_compactGraph:function(xcoord,maxComponentSize){maxComponentSize||(maxComponentSize=1/0);for(var iter=0,improved=!0;improved&&iter<20;){improved=!1,iter++;for(rank=1;rank<this.DG.order.order.length;rank++)for(order=0;order<this.DG.order.order[rank].length-1;order++){v=this.DG.order.order[rank][order];if(this.DG.GG.isChildhub(v))break;if(0!=(slack=xcoord.getSlackOnTheRight(v))){var DG=this.DG,excludeEdgesSpanningOrder=function(from,to){if(DG.ranks[from]==rank&&DG.ranks[to]==rank){var orderFrom=DG.order.vOrder[from],orderTo=DG.order.vOrder[to];if(orderFrom<=order&&orderTo>order||orderTo<=order&&orderFrom>order)return!1}return!0},rightNeighbour=this.DG.order.order[rank][order+1];(stopSet={})[rightNeighbour]=!0;var leftSide=!0;if(!(component=this.DG.findConnectedComponent(v,excludeEdgesSpanningOrder,stopSet,maxComponentSize)).stopSetReached){if(component.size>maxComponentSize){if((component=this.DG.findConnectedComponent(rightNeighbour,excludeEdgesSpanningOrder,{},maxComponentSize)).size>maxComponentSize)continue;leftSide=!1}if(0!=(slack=leftSide?xcoord.findVertexSetSlacks(component.component).rightSlack:-xcoord.findVertexSetSlacks(component.component).leftSlack)){console.log("Moving: "+Helpers.stringifyObject(component.component)+" by "+slack),improved=!0;for(var node in component.component)component.component.hasOwnProperty(node)&&(xcoord.xcoord[node]+=slack)}}}}if(!isFinite(maxComponentSize))for(var rank=1;rank<this.DG.order.order.length;rank++)for(var order=0;order<this.DG.order.order[rank].length;order++){var v=this.DG.order.order[rank][order];if(this.DG.GG.isPerson(v))break;if(this.DG.GG.isRelationship(v))break;if(this.DG.GG.isChildhub(v)){var childhubX=xcoord.xcoord[v],childInfo=this.analizeChildren(v),childPositionInfo=this._computeDesiredChildhubLocation(childInfo,xcoord);if(!(childhubX>=childPositionInfo.leftX&&childhubX<=childPositionInfo.rightX)){var shiftChhub=childhubX>childPositionInfo.maxPreferred?childPositionInfo.maxPreferred-childhubX:childPositionInfo.minPreferred-childhubX,noChildEdges=function(from,to){return from!=v},stopSet=Helpers.toObjectWithTrue(this.DG.GG.getOutEdges(v)),component=this.DG.findConnectedComponent(v,noChildEdges,stopSet,1/0);if(!component.stopSetReached){var slack=shiftChhub>0?Math.min(shiftChhub,xcoord.findVertexSetSlacks(component.component).rightSlack):Math.max(shiftChhub,-xcoord.findVertexSetSlacks(component.component).leftSlack);if(0!=slack){console.log("Moving chhub: "+Helpers.stringifyObject(component.component)+" by "+slack),improved=!0;for(var node in component.component)component.component.hasOwnProperty(node)&&(xcoord.xcoord[node]+=slack)}}}}}}},_findAffectedSet:function(v_list,dontmove_set,noUp_set,noDown_set,forbidden_set,shiftSize,xcoord,stopAtVirtual,minimizeMovement,stopAtPersons,stopAtRels,stopAtRank){var nodes=Helpers.toObjectWithTrue(v_list),initialNodes=Helpers.toObjectWithTrue(v_list);if(minimizeMovement){for(i=0;i<v_list.length;i++)noUp_set[v_list[i]]=!0,noDown_set[v_list[i]]=!0;for(var node in dontmove_set)if(dontmove_set.hasOwnProperty(node))for(var rank=this.DG.ranks[node],order=this.DG.order.vOrder[node],from=shiftSize>0?0:order+1,to=shiftSize>0?order:this.DG.order.order[rank].length,i=from;i<to;i++){var u=this.DG.order.order[rank][i];dontmove_set[u]=!0,noUp_set[u]=!0,noDown_set[u]=!0}}var numPersons=0,numRels=0,numVirtual=0,minRank=1/0,forbiddenMoved=!1,toMove=new Queue;for(toMove.setTo(v_list);toMove.size()>0&&!(stopAtPersons&&numPersons>stopAtPersons)&&!(stopAtRels&&numRels>stopAtRels);){var nextV=toMove.pop();if(forbidden_set&&forbidden_set.hasOwnProperty(nextV)){forbiddenMoved=!0;break}if(shiftSize>0){if((slack=xcoord.getSlackOnTheRight(nextV))<shiftSize){var rightNeighbour=this.DG.order.getRightNeighbour(nextV,this.DG.ranks[nextV]);nodes.hasOwnProperty(rightNeighbour)||(nodes[rightNeighbour]=!0,toMove.push(rightNeighbour))}}else{var slack=xcoord.getSlackOnTheLeft(nextV);if(slack<-shiftSize){var leftNeighbour=this.DG.order.getLeftNeighbour(nextV,this.DG.ranks[nextV]);nodes.hasOwnProperty(leftNeighbour)||(nodes[leftNeighbour]=!0,toMove.push(leftNeighbour))}}if(!noUp_set.hasOwnProperty(nextV)||!noDown_set.hasOwnProperty(nextV)){if(this.DG.ranks[nextV]<minRank&&!initialNodes.hasOwnProperty(nextV)&&(minRank=this.DG.ranks[nextV],stopAtRank&&minRank<stopAtRank))break;if(this.DG.GG.isRelationship(nextV)){initialNodes.hasOwnProperty(nextV)||numRels++;chhub=this.DG.GG.getOutEdges(nextV)[0];if(nodes.hasOwnProperty(chhub)||(nodes[chhub]=!0,toMove.push(chhub)),minimizeMovement||noUp_set.hasOwnProperty(nextV))continue;for(var parents=this.DG.GG.getInEdges(nextV),i=0;i<parents.length;i++)dontmove_set.hasOwnProperty(parents[i])||nodes.hasOwnProperty(parents[i])||(this.DG.order.vOrder[parents[i]]==this.DG.order.vOrder[nextV]+1&&shiftSize<0||this.DG.order.vOrder[parents[i]]==this.DG.order.vOrder[nextV]-1&&shiftSize>0)&&(nodes[parents[i]]=!0,toMove.push(parents[i]))}else if(this.DG.GG.isChildhub(nextV)){var rel=this.DG.GG.getInEdges(nextV)[0];if(nodes.hasOwnProperty(rel)||(nodes[rel]=!0,toMove.push(rel)),minimizeMovement||noDown_set.hasOwnProperty(nextV))continue;var childInfo=this.analizeChildren(nextV),positionInfo=this._computeDesiredChildhubLocation(childInfo,xcoord,nodes,shiftSize),shiftedChildhubX=(childhubX=xcoord.xcoord[nextV])+shiftSize;if(shiftedChildhubX==positionInfo.minPreferredWithShift||shiftedChildhubX==positionInfo.maxPreferredWithShift)continue;if(childhubX<positionInfo.minPreferredWithShift&&shiftSize>0&&shiftedChildhubX<positionInfo.minPreferredWithShift)continue;if(childhubX>positionInfo.maxPreferredWithShift&&shiftSize<0&&shiftedChildhubX>positionInfo.maxPreferredWithShift)continue;for(var children=this.DG.GG.getOutEdges(nextV),j=0;j<children.length;j++)dontmove_set.hasOwnProperty(children[j])||nodes.hasOwnProperty(children[j])||(nodes[children[j]]=!0,toMove.push(children[j]))}else if(this.DG.GG.isPerson(nextV)){if(initialNodes.hasOwnProperty(nextV)||this.DG.GG.isPlaceholder(nextV)||numPersons++,!noDown_set.hasOwnProperty(nextV))for(var rels=this.DG.GG.getOutEdges(nextV),j=0;j<rels.length;j++)dontmove_set.hasOwnProperty(rels[j])||nodes.hasOwnProperty(rels[j])||(this.DG.order.vOrder[rels[j]]==this.DG.order.vOrder[nextV]+1&&shiftSize<0||this.DG.order.vOrder[rels[j]]==this.DG.order.vOrder[nextV]-1&&shiftSize>0)&&(shiftSize>0&&0==xcoord.getSlackOnTheLeft(nextV)||shiftSize<0&&0==xcoord.getSlackOnTheRight(nextV))&&(nodes[rels[j]]=!0,toMove.push(rels[j]));var twins=this.DG.GG.getAllTwinsOf(nextV);if(twins.length>1)for(var t=0;t<twins.length;t++){var twin=twins[t];dontmove_set.hasOwnProperty(twin)||nodes.hasOwnProperty(twin)||toMove.push(twin)}if(noUp_set.hasOwnProperty(nextV))continue;var inEdges=this.DG.GG.getInEdges(nextV);if(inEdges.length>0){var chhub=inEdges[0];if(dontmove_set.hasOwnProperty(chhub)||nodes.hasOwnProperty(chhub))continue;var childInfo=this.analizeChildren(chhub),positionInfo=this._computeDesiredChildhubLocation(childInfo,xcoord,nodes,shiftSize),childhubX=xcoord.xcoord[chhub];if(childhubX==positionInfo.minPreferredWithShift||childhubX==positionInfo.maxPreferredWithShift)continue;if(childhubX<positionInfo.minPreferred&&shiftSize<0&&childhubX<positionInfo.minPreferredWithShift)continue;if(childhubX>positionInfo.maxPreferred&&shiftSize>0&&childhubX>positionInfo.maxPreferredWithShift)continue;nodes[chhub]=!0,toMove.push(chhub)}}else if(this.DG.GG.isVirtual(nextV)){if(initialNodes.hasOwnProperty(nextV)||numVirtual++,stopAtVirtual&&numVirtual>0)break;if(!noUp_set.hasOwnProperty(nextV)){var v1=this.DG.GG.getInEdges(nextV)[0];this.DG.GG.isPerson(v1)||nodes.hasOwnProperty(v1)||dontmove_set.hasOwnProperty(v1)||(nodes[v1]=!0,toMove.push(v1))}if(!noDown_set.hasOwnProperty(nextV)){var v2=this.DG.GG.getOutEdges(nextV)[0];this.DG.GG.isRelationship(v2)||nodes.hasOwnProperty(v2)||dontmove_set.hasOwnProperty(v2)||(nodes[v2]=!0,toMove.push(v2))}}}}var affectedNodes=[];for(var node in nodes)nodes.hasOwnProperty(node)&&affectedNodes.push(node);return{nodes:affectedNodes,numPersons:numPersons,numRelationships:numRels,numVirtual:numVirtual,minAffectedRank:minRank,forbiddenMoved:forbiddenMoved}},_computeDesiredChildhubLocation:function(childInfo,xcoord,nodesThatShift,shiftSize){var leftMost=childInfo.leftMostChildId,rightMost=childInfo.rightMostChildId,leftX=xcoord.xcoord[leftMost],rightX=xcoord.xcoord[rightMost],middle=(leftX+rightX)/2,median=3==childInfo.orderedChildren.length?xcoord.xcoord[childInfo.orderedChildren[1]]:middle,result={leftX:leftX,rightX:rightX,middle:middle,median:median,minPreferred:Math.min(middle,median),maxPreferred:Math.max(middle,median)};if(nodesThatShift){var middleShifted=(leftX+(nodesThatShift.hasOwnProperty(leftMost)?shiftSize:0)+(rightX+(nodesThatShift.hasOwnProperty(rightMost)?shiftSize:0)))/2,medianShifted=3==childInfo.orderedChildren.length?xcoord.xcoord[childInfo.orderedChildren[1]]+(nodesThatShift.hasOwnProperty(childInfo.orderedChildren[1])?shiftSize:0):middleShifted,minIntervalXShifted=Math.min(middleShifted,medianShifted),maxIntervalXShifted=Math.max(middleShifted,medianShifted);result.minPreferredWithShift=minIntervalXShifted,result.maxPreferredWithShift=maxIntervalXShifted}return result},optimizeLongEdgePlacement:function(){var xcoord=new XCoord(this.DG.positions,this.DG),longEdges=this.DG.find_long_edges();this.DG.try_straighten_long_edges(longEdges,xcoord);var stillNotStraight=this.straighten_long_edges(longEdges,xcoord);this.DG.try_straighten_long_edges(stillNotStraight,xcoord),this.DG.positions=xcoord.xcoord},straighten_long_edges:function(longEdges,xcoord){for(var stillNotStraight=[],e=0;e<longEdges.length;e++){var chain=longEdges[e];do{for(var improved=!1,headCenter=xcoord.xcoord[chain[0]],i=1;i<chain.length;i++){var nextV=chain[i],nextCenter=xcoord.xcoord[nextV];if(nextCenter!=headCenter){var head=chain.slice(0,i),tail=chain.slice(i),shiftHeadSize=nextCenter-headCenter,dontmove=Helpers.toObjectWithTrue(tail),affectedInfoHeadShift=this._findAffectedSet(head,dontmove,{},{},{},shiftHeadSize,xcoord,!0,!0,5,3),shiftTailSize=headCenter-nextCenter,dontmove=Helpers.toObjectWithTrue(head),affectedInfoTailShift=this._findAffectedSet(tail,dontmove,{},{},{},shiftTailSize,xcoord,!0,!0,5,3);if(!this._isShiftSizeAcceptable(affectedInfoHeadShift,!1,5,3)&&!this._isShiftSizeAcceptable(affectedInfoTailShift,!1,5,3)){stillNotStraight.push(chain);break}if(improved=!0,this._isShiftBetter(affectedInfoTailShift,affectedInfoHeadShift))for(var nodes=affectedInfoTailShift.nodes,i=0;i<nodes.length;i++)xcoord.xcoord[nodes[i]]+=shiftTailSize;else for(var nodes=affectedInfoHeadShift.nodes,i=0;i<nodes.length;i++)xcoord.xcoord[nodes[i]]+=shiftHeadSize;break}}}while(improved)}return stillNotStraight},_isShiftSizeAcceptable:function(shiftInfo,allowShiftVirtual,maxPersonNodes,maxRelNodes){return!shiftInfo.forbiddenMoved&&(!(!allowShiftVirtual&&shiftInfo.numVirtual>0)&&(!(shiftInfo.numPersons>maxPersonNodes)&&!(shiftInfo.numRelationships>maxRelNodes)))},_isShiftBetter:function(shiftInfo1,shiftInfo2){return shiftInfo2.numVirtual>shiftInfo1.numVirtual||!(shiftInfo2.numVirtual<shiftInfo1.numVirtual)&&(shiftInfo2.numPersons>shiftInfo1.numPersons||!(shiftInfo2.numPersons<shiftInfo1.numPersons)&&shiftInfo2.numRelationships>shiftInfo1.numRelationships)},moveToCorrectPositionAndMoveOtherNodesAsNecessary:function(newNodeId,nodeToKeepEdgeStraightTo){console.log("========== PLACING "+newNodeId);var originalDisturbRank=this.DG.ranks[newNodeId],xcoord=new XCoord(this.DG.positions,this.DG),leftBoundary=xcoord.getLeftMostNoDisturbPosition(newNodeId),rightBoundary=xcoord.getRightMostNoDisturbPosition(newNodeId),desiredPosition=this.DG.positions[nodeToKeepEdgeStraightTo];nodeToKeepEdgeStraightTo!=newNodeId&&(this.DG.ranks[nodeToKeepEdgeStraightTo]==originalDisturbRank?this.DG.order.vOrder[newNodeId]>this.DG.order.vOrder[nodeToKeepEdgeStraightTo]?desiredPosition=xcoord.getRightEdge(nodeToKeepEdgeStraightTo)+xcoord.getSeparation(newNodeId,nodeToKeepEdgeStraightTo)+xcoord.halfWidth[newNodeId]:(desiredPosition=xcoord.getLeftEdge(nodeToKeepEdgeStraightTo)-xcoord.getSeparation(newNodeId,nodeToKeepEdgeStraightTo)-xcoord.halfWidth[newNodeId])>rightBoundary&&(desiredPosition=rightBoundary):this.DG.GG.isPerson(newNodeId)&&desiredPosition>rightBoundary&&(desiredPosition=rightBoundary));var insertPosition=desiredPosition<leftBoundary?leftBoundary:desiredPosition;xcoord.xcoord[newNodeId]=insertPosition;var shiftAmount=0;insertPosition>desiredPosition&&(shiftAmount=insertPosition-desiredPosition);var disturbedNodes=new Queue;disturbedNodes.push([newNodeId,shiftAmount]);var iterOuter=0,iter=0,doNotTouch={},ancestors=this.DG.GG.getAllAncestors(newNodeId);for(var node in ancestors){doNotTouch[node]=!0;for(var rank=this.DG.ranks[node],order=this.DG.order.vOrder[node],i=0;i<order;i++)doNotTouch[u=this.DG.order.order[rank][i]]=!0}for(var totalMove={};disturbedNodes.size()>0&&iterOuter<5;){iterOuter++;for(var childrenMoved={},maxExpectedMovements=5*this.DG.ranks.length;disturbedNodes.size()>0&&iter<maxExpectedMovements;){iter++;var next=disturbedNodes.pop(),v=next[0];shiftAmount=next[1];var type=this.DG.GG.type[v],vrank=this.DG.ranks[v],vorder=this.DG.order.vOrder[v],position=xcoord.xcoord[v],rightMostOK=xcoord.getRightMostNoDisturbPosition(v);if(position>rightMostOK){var rightDisturbed=this.DG.order.order[vrank][vorder+1],toMove=position-rightMostOK;xcoord.xcoord[rightDisturbed]+=toMove,totalMove[rightDisturbed]=totalMove.hasOwnProperty(rightDisturbed)?totalMove[rightDisturbed]+toMove:toMove,disturbedNodes.push([rightDisturbed,toMove])}if(v!=newNodeId||type==BaseGraph.TYPE.VIRTUALEDGE){var inEdges=this.DG.GG.getInEdges(v),outEdges=this.DG.GG.getOutEdges(v),skipInEdges=!1;if(type!=BaseGraph.TYPE.PERSON&&type!=BaseGraph.TYPE.VIRTUALEDGE||v!=newNodeId||(skipInEdges=!0),type==BaseGraph.TYPE.VIRTUALEDGE){var inEdgeV=inEdges[0];this.DG.ranks[inEdgeV]==vrank&&(skipInEdges=!0)}if(type==BaseGraph.TYPE.RELATIONSHIP&&(skipInEdges=!0,2==inEdges.length)){var parent0=inEdges[0],parent1=inEdges[1],order0=this.DG.order.vOrder[parent0],order1=this.DG.order.vOrder[parent1];order0!=vorder-1||1!=this.DG.GG.getOutEdges(parent0).length||0!=this.DG.GG.getInEdges(parent0).length||doNotTouch.hasOwnProperty(parent0)?order1!=vorder-1||1!=this.DG.GG.getOutEdges(parent1).length||0!=this.DG.GG.getInEdges(parent1).length||doNotTouch.hasOwnProperty(parent1)||(!totalMove.hasOwnProperty(parent1)||totalMove[parent1]<totalMove[v])&&(xcoord.xcoord[parent1]+=shiftAmount,totalMove[parent1]=totalMove.hasOwnProperty(parent1)?totalMove[parent1]+shiftAmount:shiftAmount):(!totalMove.hasOwnProperty(parent0)||totalMove[parent0]<totalMove[v])&&(xcoord.xcoord[parent0]+=shiftAmount,totalMove[parent0]=totalMove.hasOwnProperty(parent0)?totalMove[parent0]+shiftAmount:shiftAmount)}if(!skipInEdges)for(i=0;i<inEdges.length;i++){var u=inEdges[i],typeU=this.DG.GG.type[u];if(!doNotTouch.hasOwnProperty(u)&&!(totalMove.hasOwnProperty(u)&&totalMove[u]>=totalMove[v]))if(type!=BaseGraph.TYPE.PERSON||typeU!=BaseGraph.TYPE.CHILDHUB){if(typeU!=BaseGraph.TYPE.VIRTUALEDGE||xcoord.xcoord[u]!=xcoord.xcoord[v]){shiftU=totalMove.hasOwnProperty(u)?Math.min(shiftAmount,Math.max(totalMove[v]-totalMove[u],0)):shiftAmount;xcoord.xcoord[u]+=shiftU,totalMove[u]=totalMove.hasOwnProperty(u)?totalMove[u]+shiftU:shiftU,disturbedNodes.push([u,shiftU])}}else childrenMoved.hasOwnProperty(u)?childrenMoved[u]++:childrenMoved[u]=1}if(type==BaseGraph.TYPE.CHILDHUB){for(var rightMostChildPos=0,i=0;i<outEdges.length;i++){var u=outEdges[i],pos=xcoord.xcoord[u];pos>rightMostChildPos&&(rightMostChildPos=pos)}if(rightMostChildPos>=xcoord.xcoord[v])continue}for(i=0;i<outEdges.length;i++){var u=outEdges[i],shiftU=totalMove.hasOwnProperty(u)?Math.min(shiftAmount,Math.max(totalMove[v]-totalMove[u],0)):shiftAmount;if(!doNotTouch.hasOwnProperty(u)&&(!(totalMove.hasOwnProperty(u)&&totalMove[u]>=totalMove[v])&&this.DG.ranks[u]!=vrank)){if(type==BaseGraph.TYPE.RELATIONSHIP||type==BaseGraph.TYPE.VIRTUALEDGE){var diff=xcoord.xcoord[v]-xcoord.xcoord[u];if(diff<=0)continue;diff<shiftU&&(shiftU=diff)}xcoord.xcoord[u]+=shiftU,totalMove[u]=totalMove.hasOwnProperty(u)?totalMove[u]+shiftU:shiftU,disturbedNodes.push([u,shiftU])}}}}for(var chhub in childrenMoved)if(childrenMoved.hasOwnProperty(chhub)){if(chhub=parseInt(chhub),doNotTouch.hasOwnProperty(chhub))continue;var children=this.DG.GG.getOutEdges(chhub);if(children.length>0&&children.length==childrenMoved[chhub]){for(var minShift=1/0,j=0;j<children.length;j++)totalMove[children[j]]<minShift&&(minShift=totalMove[children[j]]);if(totalMove.hasOwnProperty(chhub)){if(totalMove[chhub]>minShift)continue;minShift-=totalMove[chhub]}xcoord.xcoord[chhub]+=minShift,totalMove[chhub]=totalMove.hasOwnProperty(chhub)?totalMove[chhub]+minShift:minShift,disturbedNodes.push([chhub,minShift])}}}this.DG.positions=xcoord.xcoord,console.log("PLACED/MOVED: "+newNodeId+" @ position "+this.DG.positions[newNodeId])}};