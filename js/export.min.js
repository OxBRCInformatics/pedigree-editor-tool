/*! pedigree-editor-tool - v1.3.1 - 2017-05-22
* https://github.com/OxBRCInformatics/pedigree-editor-tool#readme
* Copyright (c) 2017  Licensed AGPL-3.0 */

PedigreeExport=function(){},PedigreeExport.prototype={},PedigreeExport.exportAsSimpleJSON=function(pedigree,privacySetting){for(var exportObj=[],getMotherFather=function(nodeID){var parents=pedigree.GG.getParents(nodeID);if(parents.length>0){var father=parents[0],mother=parents[1];"F"!=pedigree.GG.properties[parents[0]].gender&&"M"!=pedigree.GG.properties[parents[1]].gender||(father=parents[1],mother=parents[0])}return{mother:mother,father:father}},idToJSONId=PedigreeExport.createNewIDs(pedigree),i=0;i<=pedigree.GG.getMaxRealVertexId();i++)if(pedigree.GG.isPerson(i)&&!pedigree.GG.isPlaceholder(i)){var person={id:idToJSONId[i]},parents=getMotherFather(i);person.father=idToJSONId[parents.father],person.mother=idToJSONId[parents.mother];properties=pedigree.GG.properties[i];for(var property in properties)if(properties.hasOwnProperty(property)){if("all"!=privacySetting){if("lName"==property||"fName"==property||"lNameAtB"==property||"dob"==property||"bob"==property)continue;if("minimal"==privacySetting&&"comments"==property)continue}null!==(converted=PedigreeExport.convertProperty(property,properties[property]))&&(person[converted.propertyName]=converted.value),converted&&"ageOfDeathFormat"==converted.propertyName&&(!person.ageOfDeath||person.ageOfDeath&&""==person.ageOfDeath)&&delete person.ageOfDeathFormat}exportObj.push(person)}for(var nextRelId=1,i=0;i<=pedigree.GG.getMaxRealVertexId();i++)if(pedigree.GG.isRelationship(i)){var relationship={relationshipId:nextRelId++},properties=pedigree.GG.properties[i],hasProperties=!1;for(var property in properties)if(properties.hasOwnProperty(property)){hasProperties=!0;var converted=PedigreeExport.convertRelationshipProperty(property,properties[property]);null!==converted&&(relationship[converted.propertyName]=converted.value)}if(hasProperties){parents=getMotherFather(i);relationship.partner1=idToJSONId[parents.father],relationship.partner2=idToJSONId[parents.mother],exportObj.push(relationship)}}return JSON.stringify(exportObj)},PedigreeExport.exportAsPED=function(pedigree,idGenerationPreference){for(var output="",familyID=XWiki.currentDocument.page,idToPedId=PedigreeExport.createNewIDs(pedigree,idGenerationPreference),i=0;i<=pedigree.GG.getMaxRealVertexId();i++)if(pedigree.GG.isPerson(i)&&!pedigree.GG.isPlaceholder(i)){output+=familyID+" "+idToPedId[i]+" ";var parents=pedigree.GG.getParents(i);if(parents.length>0){var father=parents[0],mother=parents[1];"F"!=pedigree.GG.properties[parents[0]].gender&&"M"!=pedigree.GG.properties[parents[1]].gender||(father=parents[1],mother=parents[0]),output+=idToPedId[father]+" "+idToPedId[mother]+" "}else output+="0 0 ";var sex=3;"M"==pedigree.GG.properties[i].gender?sex=1:"F"==pedigree.GG.properties[i].gender&&(sex=2),output+=sex+" ";var status=-9;pedigree.GG.properties[i].hasOwnProperty("carrierStatus")&&(status="affected"==pedigree.GG.properties[i].carrierStatus||"carrier"==pedigree.GG.properties[i].carrierStatus||"presymptomatic"==pedigree.GG.properties[i].carrierStatus?2:1),output+=status+"\n"}return output},PedigreeExport.exportAsBOADICEA=function(dynamicPedigree,idGenerationPreference){var pedigree=dynamicPedigree.DG,output="BOADICEA import pedigree file format 2.0\n";output+="FamID\t\tName\tTarget\tIndivID\tFathID\tMothID\tSex\tTwin\tDead\tAge\tYob\t1BrCa\t2BrCa\tOvCa\tProCa\tPanCa\tGtest\tMutn\tAshkn\tNot_implemented_yet\n";for(var familyID=XWiki.currentDocument.page,idToBoadId=PedigreeExport.createNewIDs(pedigree,idGenerationPreference,7,!0),alertUnknownGenderFound=!1,warnAboutMissingDOB=!1,i=0;i<=pedigree.GG.getMaxRealVertexId();i++)if(pedigree.GG.isPerson(i)&&!pedigree.GG.isPlaceholder(i)){var id=idToBoadId[i];output+=familyID+"\t"+(pedigree.GG.properties[i].hasOwnProperty("fName")?pedigree.GG.properties[i].fName.substring(0,8).replace(/[^A-Za-z0-9]/g,""):id)+"\t"+(0==i?"1":"0")+"\t"+id+"\t";var parents=pedigree.GG.getParents(i);if(parents.length>0){if("U"==pedigree.GG.properties[parents[0]].gender&&"U"==pedigree.GG.properties[parents[1]].gender)return editor.getOkCancelDialogue().showCustomized("Unable to export in BOADICEA format when both parents of any node are of unknown gender","Can't export: missing gender data","OK",null),"";var father=parents[0],mother=parents[1];"F"!=pedigree.GG.properties[parents[0]].gender&&"M"!=pedigree.GG.properties[parents[1]].gender||(father=parents[1],mother=parents[0]),output+=idToBoadId[father]+"\t"+idToBoadId[mother]+"\t"}else output+="0\t0\t";var sex="M",gender=pedigree.GG.properties[i].gender;if("F"==gender)sex="F";else if("U"==gender||"O"==gender){var possibleGenders=dynamicPedigree.getPossibleGenders(i);if(!possibleGenders.F&&!possibleGenders.M)return editor.getOkCancelDialogue().showCustomized("Unable to export in BOADICEA format since gender assignment in pedigree is inconsistent","Can't export: gender inconsistency in pedigree","OK",null),"";sex=possibleGenders.F&&!possibleGenders.M?"F":(possibleGenders.M&&possibleGenders.F,"M"),alertUnknownGenderFound=!0}output+=sex+"\t",null!==pedigree.GG.getTwinGroupId(i)&&pedigree.GG.properties[i].hasOwnProperty("monozygotic")&&pedigree.GG.properties[i].monozygotic?output+="1\t":output+="0\t";dead="0";if(pedigree.GG.properties[i].hasOwnProperty("lifeStatus")&&"alive"!=pedigree.GG.properties[i].lifeStatus)var dead="1";output+=dead+"\t";var age="0",yob="0";if(pedigree.GG.properties[i].hasOwnProperty("dob")){var birthDate=new PedigreeDate(pedigree.GG.properties[i].dob);if(yob=parseInt(birthDate.getAverageYearEstimate()),pedigree.GG.properties[i].hasOwnProperty("dod")){var deathDate=new PedigreeDate(pedigree.GG.properties[i].dod),lastYearAlive=parseInt(deathDate.getAverageYearEstimate());deathDate.toJSDate().getDayOfYear()<birthDate.toJSDate().getDayOfYear()&&lastYearAlive--}else lastYearAlive=(new Date).getFullYear();(age=lastYearAlive-yob)<0&&(age="0")}output+=age+"\t"+yob+"\t";for(var cancerSequence=["Breast","","Ovarian","Prostate","Pancreatic"],c=0;c<cancerSequence.length;c++)if(cancer=cancerSequence[c],""!=cancer&&pedigree.GG.properties[i].hasOwnProperty("cancers"))if(pedigree.GG.properties[i].cancers.hasOwnProperty(cancer)){var cancerData=pedigree.GG.properties[i].cancers[cancer];cancerData.affected?(output+=(cancerData.hasOwnProperty("numericAgeAtDiagnosis")&&cancerData.numericAgeAtDiagnosis>0?cancerData.numericAgeAtDiagnosis:"AU").toString()+"\t","0"==yob&&(warnAboutMissingDOB=!0)):output+="0\t"}else output+="0\t";else output+="0\t";if(output+="0\t",pedigree.GG.properties[i].hasOwnProperty("candidateGenes")){var genes=pedigree.GG.properties[i].candidateGenes,status="0";Helpers.arrayIndexOf(genes,"BRCA1")>=0&&(status="1"),Helpers.arrayIndexOf(genes,"BRCA2")>=0&&(status="1"==status?"3":"2"),output+=status+"\t"}else output+="0\t";var ashkenazi="0";if(pedigree.GG.properties[i].hasOwnProperty("ethnicities"))for(var ethnicities=pedigree.GG.properties[i].ethnicities,k=0;k<ethnicities.length;k++)if(null!==ethnicities[k].match(/ashkenaz/i)){ashkenazi="1";break}output+=ashkenazi+"\t",output+="0\t0\t0\t0\t0",output+="\n"}if(alertUnknownGenderFound||warnAboutMissingDOB){var warningText="Pedigree can be exported, but there are warnings:\n\n\n",numberWarnings=!1;alertUnknownGenderFound&&warnAboutMissingDOB&&(numberWarnings=!0),alertUnknownGenderFound&&(warningText+=(numberWarnings?"1) ":"")+"BOADICEA format does not support unknown or other genders.\n\nAll persons of unknown or other gender were either assigned a gender opposite to their partner's gender or saved as male in the export file"),warnAboutMissingDOB&&(warningText+=(numberWarnings?"\n\n\n2) ":"")+"BOADICEA requires that all individuals with cancer have their age specified or estimated.\n\nA person with cancer is missing age data, data will be exported but may not be accepted by BOADICEA"),alert(warningText)}return output},PedigreeExport.internalToJSONPropertyMapping={proband:"proband",fName:"firstName",lName:"lastName",NHSNumber:"NHSNumber",CHINumber:"CHINumber",gelSuperFamilyId:"gelSuperFamilyId",karyotypicSex:"karyotypicSex",consanguineousPopulation:"consanguineousPopulation",ancestries:"ancestries",participantId:"participantId",registered:"registered",lNameAtB:"lastNameAtBirth",comments:"comments",twinGroup:"twinGroup",monozygotic:"monozygotic",adoptedStatus:"adoptedStatus",evaluated:"evaluated",dob:"birthDate",dod:"deathDate",ageOfDeath:"ageAtDeath",ageOfDeathFormat:"ageAtDeathFormat",gestationAge:"gestationAge",lifeStatus:"lifeStatus",disorders:"disorders",disordersFullDetails:"disordersFullDetails",ethnicities:"ethnicities",carrierStatus:"affectionStatus",externalID:"externalId",gender:"sex",numPersons:"numPersons",hpoTerms:"hpoTerms",hpoTermsFullDetails:"hpoTermsFullDetails",candidateGenes:"candidateGenes",lostContact:"lostContact",nodeNumber:"nodeNumber",cancers:"cancers",childlessStatus:"childlessStatus",childlessReason:"childlessReason"},PedigreeExport.internalToJSONRelationshipPropertyMapping={childlessStatus:"childlessStatus",childlessReason:"childlessReason",consangr:"consanguinity",broken:"separated"},PedigreeExport.convertProperty=function(internalPropertyName,value){if(!PedigreeExport.internalToJSONPropertyMapping.hasOwnProperty(internalPropertyName))return null;var externalPropertyName=PedigreeExport.internalToJSONPropertyMapping[internalPropertyName];return"sex"==externalPropertyName&&(value="M"==value||"m"==value||"1"==value?"male":"F"==value||"f"==value||"2"==value?"female":"O"==value||"9"==value?"other":"unknown"),{propertyName:externalPropertyName,value:value}},PedigreeExport.convertRelationshipProperty=function(internalPropertyName,value){if(!PedigreeExport.internalToJSONRelationshipPropertyMapping.hasOwnProperty(internalPropertyName))return null;var externalPropertyName=PedigreeExport.internalToJSONRelationshipPropertyMapping[internalPropertyName];return"consanguinity"==externalPropertyName&&"Y"!=value&&"N"!=value&&"P"!=value&&"U"!=value?null:{propertyName:externalPropertyName,value:value}},PedigreeExport.createNewIDs=function(pedigree,idGenerationPreference,maxLength,forbidNonAlphaNum){idGenerationPreference||(idGenerationPreference="newid");for(var idToNewId={},usedIDs={},nextUnusedID=1,i=0;i<=pedigree.GG.getMaxRealVertexId();i++)if(pedigree.GG.isPerson(i)&&!pedigree.GG.isPlaceholder(i)){var id=nextUnusedID++;"external"==idGenerationPreference&&pedigree.GG.properties[i].hasOwnProperty("externalID")?(nextUnusedID--,id=pedigree.GG.properties[i].externalID.replace(/\s/g,"_")):"name"==idGenerationPreference&&pedigree.GG.properties[i].hasOwnProperty("fName")&&(nextUnusedID--,id=pedigree.GG.properties[i].fName.replace(/\s/g,"_")),id=String(id),forbidNonAlphaNum&&(id=id.replace(/[^A-Za-z0-9]/g,"")),maxLength&&id.length>maxLength&&(id=id.substring(0,maxLength));for(var baseID=id,numSimilar=2;usedIDs.hasOwnProperty(id);){if(maxLength){var cutSize=baseID.length+String(numSimilar).length-maxLength;id=baseID.substring(0,id.length-cutSize)}else id=baseID;id+=String(numSimilar),numSimilar++}idToNewId[i]=id,usedIDs[id]=!0}return idToNewId};