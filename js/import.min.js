/*! pedigree-editor-tool - v1.3.0 - 2017-05-19
* https://github.com/OxBRCInformatics/pedigree-editor-tool#readme
* Copyright (c) 2017  Licensed AGPL-3.0 */

PedigreeImport=function(){},PedigreeImport.prototype={},PedigreeImport.initFromPhenotipsInternal=function(inputG){for(var newG=new BaseGraph,nameToId={},relationshipHasExplicitChHub={},v=0;v<inputG.length;v++){if(!inputG[v].hasOwnProperty("name")&&!inputG[v].hasOwnProperty("id"))throw"Invalid input: a node without id and without name";var type=BaseGraph.TYPE.PERSON;inputG[v].hasOwnProperty("relationship")||inputG[v].hasOwnProperty("rel")?(type=BaseGraph.TYPE.RELATIONSHIP,(inputG[v].hasOwnProperty("hub")||inputG[v].hasOwnProperty("haschhub"))&&(relationshipHasExplicitChHub[v]=!0)):inputG[v].hasOwnProperty("chhub")?type=BaseGraph.TYPE.CHILDHUB:(inputG[v].hasOwnProperty("virtual")||inputG[v].hasOwnProperty("virt"))&&(type=BaseGraph.TYPE.VIRTUALEDGE);var properties={};if((inputG[v].hasOwnProperty("properties")||inputG[v].hasOwnProperty("prop"))&&(properties=inputG[v].hasOwnProperty("properties")?inputG[v].properties:inputG[v].prop),type==BaseGraph.TYPE.PERSON&&(properties.hasOwnProperty("sex")&&!properties.hasOwnProperty("gender")&&(properties.gender=properties.sex),properties.hasOwnProperty("gender")||(properties.gender="U"),inputG[v].hasOwnProperty("gender"))){var genderString=inputG[v].gender.toLowerCase();"female"!=genderString&&"f"!=genderString&&"2"!=genderString||(properties.gender="F"),"other"==genderString||"o"==genderString||"9"==genderString?properties.gender="O":"male"!=genderString&&"m"!=genderString&&"1"!=genderString||(properties.gender="M")}var width=inputG[v].hasOwnProperty("width")?inputG[v].width:type==BaseGraph.TYPE.PERSON?newG.defaultPersonNodeWidth:newG.defaultNonPersonNodeWidth,newID=newG._addVertex(null,type,properties,width);if(inputG[v].hasOwnProperty("name")){if(nameToId[inputG[v].name])throw"Invalid user input: multiple nodes with the same name";type==BaseGraph.TYPE.PERSON&&(newG.properties[newID].fName=inputG[v].name),nameToId[inputG[v].name]=newID}if(type==BaseGraph.TYPE.RELATIONSHIP&&!relationshipHasExplicitChHub.hasOwnProperty(v)){var chHubId=newG._addVertex(null,BaseGraph.TYPE.CHILDHUB,null,width);nameToId["_chhub_"+newID]=chHubId}}for(v=0;v<inputG.length;v++){var nextV=inputG[v],vID=nextV.hasOwnProperty("id")?nextV.id:nameToId[nextV.name],origID=vID,substitutedID=!1;newG.type[vID]!=BaseGraph.TYPE.RELATIONSHIP||relationshipHasExplicitChHub.hasOwnProperty(vID)||(vID=nameToId["_chhub_"+vID],substitutedID=!0);var maxChildEdgeWeight=0;if(nextV.outedges)for(var outE=0;outE<nextV.outedges.length;outE++){var target=nextV.outedges[outE].to,targetID=nameToId[target]?nameToId[target]:target;if(!newG.isValidId(targetID))throw"Invalid input: invalid edge target ("+target+")";var weight=1;nextV.outedges[outE].hasOwnProperty("weight")&&(weight=nextV.outedges[outE].weight),weight>maxChildEdgeWeight&&(maxChildEdgeWeight=weight),newG.addEdge(vID,targetID,weight)}substitutedID&&newG.addEdge(origID,vID,maxChildEdgeWeight)}return newG.validate(),newG},PedigreeImport.initFromPED=function(inputText,acceptOtherPhenotypes,markEvaluated,saveIDAsExternalID,affectedCodeOne,disorderNames){var inputLines=inputText.match(/[^\r\n]+/g);if(0==inputLines.length)throw"Unable to import: no data";var postMakeped=!1;inputLines[0].indexOf("Ped:")>0&&inputLines[0].indexOf("Per:")>0&&(postMakeped=!0);for(var familyPrefix="",newG=new BaseGraph,nameToId={},phenotypeValues={},extendedPhenotypesFound=!1,nextID=postMakeped?1:0,i=0;i<inputLines.length;i++)if("#"!=inputLines[i].charAt(0)){if(inputLines[i]=inputLines[i].replace(/[^a-zA-Z0-9_.\-\s*]/g," "),inputLines[i]=inputLines[i].replace(/^\s+|\s+$/g,""),(parts=inputLines[i].split(/\s+/)).length<6||postMakeped&&parts.length<10)throw"Input line has not enough columns: ["+inputLines[i]+"]";if(""==familyPrefix)familyPrefix=parts[0];else if(parts[0]!=familyPrefix)throw"Unsupported feature: multiple families detected within the same pedigree";var pedID=parts[1];if(nameToId.hasOwnProperty(pedID))throw"Multiple persons with the same ID ["+pedID+"]";var genderValue=postMakeped?parts[7]:parts[4],gender="U";1==genderValue?gender="M":2==genderValue&&(gender="F");var properties={gender:gender};saveIDAsExternalID&&(properties.externalID=pedID);var useID=postMakeped&&1==parts[8]?0:nextID++;i==inputLines.length-1&&void 0===newG.v[0]&&(useID=0);var pedigreeID=newG._addVertex(useID,BaseGraph.TYPE.PERSON,properties,newG.defaultPersonNodeWidth);nameToId[pedID]=pedigreeID,phenotypeValues[phenotype=postMakeped?parts[9]:parts[5]]=!0,acceptOtherPhenotypes&&"-9"!=phenotype&&"0"!=phenotype&&"1"!=phenotype&&"2"!=phenotype&&(extendedPhenotypesFound=!0)}if(affectedCodeOne){if(extendedPhenotypesFound||phenotypeValues.hasOwnProperty("2"))throw"Phenotypes with codes other than 0 or 1 were found";var affectedValues={1:!0},missingValues={"-9":!0},unaffectedValues={0:!0}}else var affectedValues={2:!0},missingValues={0:!0,"-9":!0},unaffectedValues={1:!0};if(!disorderNames&&(disorderNames={},extendedPhenotypesFound))for(var phenotype in phenotypeValues)phenotypeValues.hasOwnProperty(phenotype)&&"-9"!=phenotype&&"0"!=phenotype&&"1"!=phenotype&&(disorderNames[phenotype]="affected (phenotype "+phenotype+")",affectedValues[phenotype]=!0);for(var relationshipTracker=new RelationshipTracker(newG,1),i=0;i<inputLines.length;i++)if("#"!=inputLines[i].charAt(0)){var parts=inputLines[i].split(/\s+/),thisPersonName=parts[1],id=nameToId[thisPersonName],phenotype=postMakeped?parts[9]:parts[5];if(affectedValues.hasOwnProperty(phenotype)){var disorder=disorderNames.hasOwnProperty(phenotype)?disorderNames[phenotype]:"affected";newG.properties[id].carrierStatus="affected",newG.properties[id].disorders=[disorder],markEvaluated&&(newG.properties[id].evaluated=!0)}else unaffectedValues.hasOwnProperty(phenotype)?(newG.properties[id].carrierStatus="",markEvaluated&&(newG.properties[id].evaluated=!0)):missingValues.hasOwnProperty(phenotype);var fatherID=parts[2],motherID=parts[3];if(0!=fatherID||0!=motherID){if(0==fatherID)fatherID=newG._addVertex(null,BaseGraph.TYPE.PERSON,{gender:"M",comments:"unknown"},newG.defaultPersonNodeWidth);else{if(void 0===(fatherID=nameToId[fatherID]))throw"Unable to import pedigree: incorrect father link on line "+(i+1)+"; Maybe import data is not in PED format?";if("F"==newG.properties[fatherID].gender)throw"Unable to import pedigree: a person declared as female [id: "+fatherID+"] is also declared as being a father for [id: "+thisPersonName+"]"}if(0==motherID)motherID=newG._addVertex(null,BaseGraph.TYPE.PERSON,{gender:"F",comments:"unknown"},newG.defaultPersonNodeWidth);else{if(void 0===(motherID=nameToId[motherID]))throw"Unable to import pedigree: incorrect mother link on line "+(i+1)+"; Maybe import data is not in PED format?";if("M"==newG.properties[motherID].gender)throw"Unable to import pedigree: a person declared as male [id: "+motherID+"] is also declared as being a mother for [id: "+thisPersonName+"]"}var chhubID=relationshipTracker.createOrGetChildhub(motherID,fatherID);newG.addEdge(chhubID,id,1)}}return PedigreeImport.validateBaseGraph(newG),newG},PedigreeImport.initFromBOADICEA=function(inputText,saveIDAsExternalID){var inputLines=inputText.match(/[^\r\n]+/g);if(inputLines.length<=2)throw"Unable to import: no data";if(null===inputLines[0].match(/^BOADICEA import pedigree file format 2/i))throw"Unable to import: unsupported version of the BOADICEA format";inputLines.splice(0,2);for(var familyPrefix="",newG=new BaseGraph,nameToId={},nextID=1,i=0;i<inputLines.length;i++){if(inputLines[i]=inputLines[i].replace(/[^a-zA-Z0-9_.\-\s*]/g," "),inputLines[i]=inputLines[i].replace(/^\s+|\s+$/g,""),(parts=inputLines[i].split(/\s+/)).length<24)throw"Input line has not enough columns: ["+inputLines[i]+"]";if(""==familyPrefix)familyPrefix=parts[0];else if(parts[0]!=familyPrefix)throw"Unsupported feature: multiple families detected within the same pedigree";var extID=parts[3];if(nameToId.hasOwnProperty(extID))throw"Multiple persons with the same ID ["+extID+"]";var gender="M";"F"==parts[6]&&(gender="F");var properties={gender:gender,fName:parts[1]};saveIDAsExternalID&&(properties.externalID=extID),"1"==parts[8]&&(properties.lifeStatus="deceased");var yob=parts[10];"0"!=yob&&Helpers.isInt(yob)&&(properties.dob={decade:yob+"s",year:parseInt(yob)});for(var addCommentToProperties=function(properties,line){line&&""!=line&&(properties.hasOwnProperty("comments")?properties.comments+="\n"+line:properties.comments=line)},cancers=[{column:11,label:"Breast",comment:""},{column:12,label:"Breast",comment:"Contralateral breast cancer",onlySetComment:!0},{column:13,label:"Ovarian",comment:""},{column:14,label:"Prostate",comment:""},{column:15,label:"Pancreatic",comment:""}],c=0;c<cancers.length;c++){var cancer=cancers[c];properties.hasOwnProperty("cancers")||(properties.cancers={});var cancerData={};if("0"==parts[cancer.column])cancer.hasOwnProperty("onlySetComment")&&cancer.onlySetComment||(cancerData.affected=!1);else{cancerData.affected=!0;var age=parts[cancer.column];if(Helpers.isInt(age)){var numericAge=parseInt(age);cancerData.numericAgeAtDiagnosis=numericAge,numericAge>100&&(age="after_100"),cancerData.ageAtDiagnosis=age}addCommentToProperties(properties,cancer.comment)}cancer.onlySetComment||(properties.cancers[cancer.label]=cancerData)}var mutations=parts[17];"1"==mutations||"2"==mutations||"3"==mutations?(properties.candidateGenes=[],1!=mutations&&3!=mutations||properties.candidateGenes.push("BRCA1"),2!=mutations&&3!=mutations||properties.candidateGenes.push("BRCA2")):"N"==mutations&&addCommentToProperties(properties,"BRCA tested: no mutations"),"0"!=parts[18]&&(properties.ethnicities=["Ashkenazi Jews"]);var useID=1==parts[2]?0:nextID++;i==inputLines.length-1&&void 0===newG.v[0]&&(useID=0);var pedigreeID=newG._addVertex(useID,BaseGraph.TYPE.PERSON,properties,newG.defaultPersonNodeWidth);nameToId[extID]=pedigreeID}for(var relationshipTracker=new RelationshipTracker(newG,1),i=0;i<inputLines.length;i++){var parts=inputLines[i].split(/\s+/),id=nameToId[extID=parts[3]],fatherID=parts[4],motherID=parts[5];if(0!=fatherID||0!=motherID){if(0==fatherID)fatherID=newG._addVertex(null,BaseGraph.TYPE.PERSON,{gender:"M",comments:"unknown"},newG.defaultPersonNodeWidth);else if(fatherID=nameToId[fatherID],"F"==newG.properties[fatherID].gender)throw"Unable to import pedigree: a person declared as female [id: "+fatherID+"] is also declared as being a father for [id: "+extID+"]";if(0==motherID)motherID=newG._addVertex(null,BaseGraph.TYPE.PERSON,{gender:"F",comments:"unknown"},newG.defaultPersonNodeWidth);else if(motherID=nameToId[motherID],"M"==newG.properties[motherID].gender)throw"Unable to import pedigree: a person declared as male [id: "+motherID+"] is also declared as being a mother for [id: "+extID+"]";var chhubID=relationshipTracker.createOrGetChildhub(motherID,fatherID);newG.addEdge(chhubID,id,1)}}return PedigreeImport.validateBaseGraph(newG),newG},PedigreeImport.validateBaseGraph=function(newG){try{newG.validate()}catch(err){throw err.indexOf("disconnected component")?"Unsupported pedigree: some components of the imported pedigree are disconnected from each other":"Unable to import pedigree"}},PedigreeImport.initFromSimpleJSON=function(inputText){try{var inputArray=JSON.parse(inputText)}catch(err){throw"Unable to import pedigree: input is not a valid JSON string "+err}if("object"!=typeof inputArray||"[object Array]"!==Object.prototype.toString.call(inputArray))throw"Unable to import pedigree: JSON does not represent an array of objects";if(0==inputArray.length)throw"Unable to import pedigree: input is empty";for(var newG=new BaseGraph,nameToID={},externalIDToID={},ambiguousReferences={},hasID={},unRenderedNodes=void 0,i=0;i<inputArray.length;i++)if(!inputArray[i].hasOwnProperty("relationshipId"))if(inputArray[i].hasOwnProperty("unrendered")||inputArray[i].hasOwnProperty("unRendered"))unRenderedNodes||(unRenderedNodes=[]),unRenderedNodes.push(inputArray[i]);else{if("object"!=typeof(nextPerson=inputArray[i]))throw"Unable to import pedigree: JSON does not represent an array of objects";if(!(nextPerson.hasOwnProperty("id")||nextPerson.hasOwnProperty("name")||nextPerson.hasOwnProperty("firstName")||nextPerson.hasOwnProperty("externalId")))throw"Unable to import pedigree: a node with no ID or name is found";var pedigreeID=newG._addVertex(null,BaseGraph.TYPE.PERSON,{},newG.defaultPersonNodeWidth),properties={};properties.gender="U";for(var property in nextPerson)if(nextPerson.hasOwnProperty(property)){value=nextPerson[property];if("mother"==(property=property.toLowerCase())||"father"==property)continue;if("sex"==property){var genderString=value.toLowerCase();"female"==genderString||"f"==genderString||"2"==genderString?properties.gender="F":"male"==genderString||"m"==genderString||"1"==genderString?properties.gender="M":"other"!=genderString&&"o"!=genderString&&"9"!=genderString||(properties.gender="O")}else if("id"==property){if(externalIDToID.hasOwnProperty(value))throw"Unable to import pedigree: multiple persons with the same ID ["+value+"]";nameToID.hasOwnProperty(value)&&nameToID[value]!=pedigreeID?(delete nameToID[value],ambiguousReferences[value]=!0):(externalIDToID[value]=pedigreeID,hasID[pedigreeID]=!0)}else"name"==property||"firstname"==property?(properties.fName=value,nameToID.hasOwnProperty(value)&&nameToID[value]!=pedigreeID?(delete nameToID[value],ambiguousReferences[value]=!0):externalIDToID.hasOwnProperty(value)&&externalIDToID[value]!=pedigreeID?(delete externalIDToID[value],ambiguousReferences[value]=!0):nameToID[value]=pedigreeID):null!==(processed=PedigreeImport.convertProperty(property,value))&&(properties[processed.propertyName]=processed.value)}nextPerson.hasOwnProperty("externalId")&&!hasID.hasOwnProperty(pedigreeID)&&(externalIDToID[nextPerson.externalId]=pedigreeID,hasID[pedigreeID]=!0),newG.properties[pedigreeID]=properties}for(var findReferencedPerson=function(reference,refType){if(ambiguousReferences.hasOwnProperty(reference))throw"Unable to import pedigree: ambiguous reference to ["+reference+"]";if(externalIDToID.hasOwnProperty(reference))return externalIDToID[reference];if(nameToID.hasOwnProperty(reference))return nameToID[reference];throw"Unable to import pedigree: ["+reference+"] is not a valid "+refType+" reference (does not correspond to a name or an ID of another person)"},relationshipTracker=new RelationshipTracker(newG,1),i=0;i<inputArray.length;i++)if(!inputArray[i].hasOwnProperty("relationshipId")){var nextPerson=inputArray[i],personID=function(person){return person.hasOwnProperty("id")?externalIDToID[person.id]:person.hasOwnProperty("firstName")?nameToID[person.firstName]:person.hasOwnProperty("name")?nameToID[person.name]:void 0}(nextPerson),motherLink=nextPerson.hasOwnProperty("mother")?nextPerson.mother:null,fatherLink=nextPerson.hasOwnProperty("father")?nextPerson.father:null;if(null!=motherLink||null!=fatherLink){if(null==fatherLink)fatherID=newG._addVertex(null,BaseGraph.TYPE.PERSON,{gender:"M",comments:"unknown"},newG.defaultPersonNodeWidth);else{var fatherID=findReferencedPerson(fatherLink,"father");if("F"==newG.properties[fatherID].gender)throw"Unable to import pedigree: a person declared as female is also declared as being a father ("+fatherLink+")"}if(null==motherLink)motherID=newG._addVertex(null,BaseGraph.TYPE.PERSON,{gender:"F",comments:"unknown"},newG.defaultPersonNodeWidth);else{var motherID=findReferencedPerson(motherLink,"mother");if("M"==newG.properties[motherID].gender)throw"Unable to import pedigree: a person declared as male is also declared as being a mother ("+motherLink+")"}if(fatherID==personID||motherID==personID)throw"Unable to import pedigree: a person is declared to be his or hew own parent";chhubID=relationshipTracker.createOrGetChildhub(motherID,fatherID);newG.addEdge(chhubID,personID,1)}}for(i=0;i<inputArray.length;i++)if(inputArray[i].hasOwnProperty("relationshipId")){var nextRelationship=inputArray[i],partnerLink1=nextRelationship.hasOwnProperty("partner1")?nextRelationship.partner1:null,partnerLink2=nextRelationship.hasOwnProperty("partner2")?nextRelationship.partner2:null;if(null==partnerLink1||null==partnerLink2)throw"Unable to import pedigree: a relationship has only one partner specified";var partnerID1=findReferencedPerson(partnerLink1),partnerID2=findReferencedPerson(partnerLink2),chhubID=relationshipTracker.createOrGetChildhub(partnerID1,partnerID2);if(0==newG.getOutEdges(chhubID).length){var placeholderID=newG._addVertex(null,BaseGraph.TYPE.PERSON,{gender:"U",placeholder:!0},newG.defaultPersonNodeWidth);newG.addEdge(chhubID,placeholderID,1)}var relationshipID=relationshipTracker.getRelationshipIDForChildHub(chhubID);for(var property in nextRelationship)if(nextRelationship.hasOwnProperty(property)){var value=nextRelationship[property];if("partner1"==(property=property.toLowerCase())||"partner2"==property)continue;var processed=PedigreeImport.convertRelationshipProperty(property,value);null!==processed&&(newG.properties[relationshipID][processed.propertyName]=processed.value)}}return PedigreeImport.validateBaseGraph(newG),newG.unRenderedNodes=unRenderedNodes,newG},PedigreeImport.initFromGEDCOM=function(inputText,markEvaluated,saveIDAsExternalID){var inputLines=inputText.match(/[^\r\n]+/g);if(0==inputLines.length)throw"Unable to import: no data";var gedcom=function(inputLines){for(var obj={header:{},individuals:[],families:[]},currentObject=[],i=0;i<inputLines.length;i++){inputLines[i].replace(/[^a-zA-Z0-9.\@\/\-\s*]/g," ").replace(/^\s+|\s+$/g,"");var words=inputLines[i].split(/\s+/),parts=words.splice(0,2);parts.push(words.join(" "));var level=parseInt(parts[0]);if(currentObject.splice(level),0==level)"HEAD"==parts[1]?currentObject[0]=obj.header:"@"==parts[1][0]&&"INDI"==parts[2]?(obj.individuals.push({}),currentObject[0]=obj.individuals[obj.individuals.length-1],currentObject[0].id=parts[1]):"@"==parts[1][0]&&"FAM"==parts[2]?(obj.families.push({}),currentObject[0]=obj.families[obj.families.length-1],currentObject[0].id=parts[1]):currentObject[0]={};else{if(currentObject.length<level-1)throw"Unable to import GEDCOM: a multi-level jump detected in line: ["+inputLines[i]+"]";currentObject[level-1].hasOwnProperty(parts[1])||(currentObject[level-1][parts[1]]=[]),currentObject.length<level+1&&(currentObject[level]={},currentObject[level-1][parts[1]].push(currentObject[level])),""!=parts[2]&&(currentObject[level].value=parts[2])}currentLevel=parts[0]}return obj}(inputLines);if(console.log("GEDCOM object: "+Helpers.stringifyObject(gedcom)),gedcom.header.hasOwnProperty("GEDC")&&gedcom.header.GEDC.hasOwnProperty("VERS")&&"5.5"!=gedcom.header.GEDC.VERS&&"5.5.1"!=gedcom.header.GEDC.VERS&&alert("Unsupported GEDCOM version detected: ["+gedcom.header.GEDC.VERS+"]. Import will continue but the correctness is not guaranteed. Supportede versions are 5.5 and 5.5.1"),0==gedcom.individuals.length)throw"Unable to create a pedigree from GEDCOM: no individuals are defined in the import data";for(var newG=new BaseGraph,externalIDToID={},i=0;i<gedcom.individuals.length;i++){var nextPerson=gedcom.individuals[i],pedigreeID=newG._addVertex(null,BaseGraph.TYPE.PERSON,{},newG.defaultPersonNodeWidth);externalIDToID[nextPerson.id]=pedigreeID;var cleanedID=nextPerson.id.replace(/@/g,""),properties=saveIDAsExternalID?{externalID:cleanedID}:{};properties.gender="U";var getFirstValue=function(obj){return obj[0].value},parseDate=function(gedcomDate){gedcomDate=(gedcomDate=(gedcomDate=(gedcomDate=(gedcomDate=gedcomDate[0].value).replace(/^(\s*)ABT(\s*)/,"")).replace(/^(\s*)EST(\s*)/,"")).replace(/^(\s*)BEF(\s*)/,"")).replace(/^(\s*)AFT(\s*)/,"");var match=/^\s*BET\s+(.+)\s+AND.*/.exec(gedcomDate);if(null!=match&&(gedcomDate=match[1]),"?"==gedcomDate)return null;var timestamp=Date.parse(gedcomDate);return 0==isNaN(timestamp)?new PedigreeDate(new Date(timestamp)):null};for(var property in nextPerson)if(nextPerson.hasOwnProperty(property))if("SEX"==property){var genderString=getFirstValue(nextPerson[property])[0].toLowerCase();"female"==genderString||"f"==genderString?properties.gender="F":"male"!=genderString&&"m"!=genderString||(properties.gender="M")}else if("BIRT"==property)nextPerson[property][0].hasOwnProperty("DATE")&&null!==(date=parseDate(nextPerson[property][0].DATE))&&(properties.dob=new PedigreeDate(date).getSimpleObject());else if("DEAT"==property){if(properties.hasOwnProperty("lifeStatus")&&"stillborn"==properties.lifeStatus)continue;if(properties.lifeStatus="deceased",nextPerson[property][0].hasOwnProperty("DATE")){var date=parseDate(nextPerson[property][0].DATE);null!==date&&(properties.dod=new PedigreeDate(date).getSimpleObject())}}else if("ADOP"==property)properties.adoptedStatus="adoptedIn";else if("_INFO"==property)properties.hasOwnProperty("comments")||(properties.comments=""),properties.comments+="(Info: "+getFirstValue(nextPerson[property])+")\n";else if("NOTE"==property||"_COMMENT"==property){if(properties.hasOwnProperty("comments")||(properties.comments=""),properties.comments+=getFirstValue(nextPerson[property])+"\n",nextPerson[property][0].hasOwnProperty("CONT"))for(var more=nextPerson[property][0].CONT,cc=0;cc<more.length;cc++)properties.comments+=more[cc].value+"\n"}else if("NAME"==property){var firstName=(nameParts=getFirstValue(nextPerson[property]).split("/"))[0].replace(/^\s+|\s+$/g,""),lastName=nameParts.length>1?nameParts[1].replace(/^\s+|\s+$/g,""):"";properties.fName=firstName,""!=lastName&&(properties.lName=lastName)}else if("_MAIDEN"==property){var nameParts=getFirstValue(nextPerson[property]).split("/"),firstName=nameParts[0].replace(/^\s+|\s+$/g,""),lastName=nameParts.length>1?nameParts[1].replace(/^\s+|\s+$/g,""):"";properties.lNameAtB=firstName,""!=lastName&&(properties.lNameAtB+=" "+lastName)}else if("_GENSTAT"==property)for(var props=getFirstValue(nextPerson[property]).split(""),p=0;p<props.length;p++){var value=props[p];switch(65533!=value.charCodeAt(0)&&172!=value.charCodeAt(0)||(value="HEARSAY"),value){case"O":properties.carrierStatus="affected",properties.disorders=["affected"],markEvaluated&&(properties.evaluated=!0);break;case"HEARSAY":properties.carrierStatus="presymptomatic",markEvaluated&&(properties.evaluated=!0);break;case"K":properties.lifeStatus="stillborn";break;case"M":properties.childlessStatus="infertile";break;case"E":properties.hasOwnProperty("comments")?properties.comments="(untested)\n"+properties.comments:properties.comments="(untested)"}}properties.hasOwnProperty("comments")&&(properties.comments=properties.comments.replace(/^\s+|\s+$/g,""),""==properties.comments&&delete properties.comments),newG.properties[pedigreeID]=properties}for(var relationshipTracker=new RelationshipTracker(newG,1),i=0;i<gedcom.families.length;i++){var nextFamily=gedcom.families[i],motherLink=nextFamily.hasOwnProperty("WIFE")?getFirstValue(nextFamily.WIFE):null,fatherLink=nextFamily.hasOwnProperty("HUSB")?getFirstValue(nextFamily.HUSB):null;if(null==fatherLink)fatherID=newG._addVertex(null,BaseGraph.TYPE.PERSON,{gender:"M",comments:"unknown"},newG.defaultPersonNodeWidth);else{var fatherID=externalIDToID[fatherLink];if("F"==newG.properties[fatherID].gender)throw"Unable to import pedigree: a person declared as female is also declared as being a father ("+fatherLink+")"}if(null==motherLink)motherID=newG._addVertex(null,BaseGraph.TYPE.PERSON,{gender:"F",comments:"unknown"},newG.defaultPersonNodeWidth);else{var motherID=externalIDToID[motherLink];if("M"==newG.properties[motherID].gender)throw"Unable to import pedigree: a person declared as male is also declared as being a mother ("+motherLink+")"}var chhubID=relationshipTracker.createOrGetChildhub(motherID,fatherID),children=nextFamily.hasOwnProperty("CHIL")?nextFamily.CHIL:null;null==children&&(externalIDToID[childID=newG._addVertex(null,BaseGraph.TYPE.PERSON,{gender:"U",placeholder:!0},newG.defaultPersonNodeWidth)]=childID,children=[{value:childID}]);for(var j=0;j<children.length;j++){var externalID=children[j].value,childID=externalIDToID.hasOwnProperty(externalID)?externalIDToID[externalID]:null;if(null==childID)throw"Unable to import pedigree: child link does not point to an existing individual: ["+externalID+"]";newG.addEdge(chhubID,childID,1)}}return PedigreeImport.validateBaseGraph(newG),newG},PedigreeImport.JSONToInternalPropertyMapping={proband:"proband",lastname:"lName",nhsnumber:"NHSNumber",chinumber:"CHINumber",familyid:"familyId",gelsuperfamilyid:"gelSuperFamilyId",consanguineouspopulation:"consanguineousPopulation",karyotypicsex:"karyotypicSex",ancestries:"ancestries",participantid:"participantId",registered:"registered",lastnameatbirth:"lNameAtB",comments:"comments",twingroup:"twinGroup",monozygotic:"monozygotic",adoptedstatus:"adoptedStatus",evaluated:"evaluated",birthdate:"dob",deathdate:"dod",ageatdeath:"ageOfDeath",ageatdeathformat:"ageOfDeathFormat",gestationage:"gestationAge",lifestatus:"lifeStatus",disorders:"disorders",disordersfulldetails:"disordersFullDetails",hpoterms:"hpoTerms",hpotermsfulldetails:"hpoTermsFullDetails",candidategenes:"candidateGenes",ethnicities:"ethnicities",affectionstatus:"carrierStatus",externalid:"externalID",numpersons:"numPersons",lostcontact:"lostContact",nodenumber:"nodeNumber",cancers:"cancers",childlessstatus:"childlessStatus",childlessreason:"childlessReason"},PedigreeImport.convertProperty=function(externalPropertyName,value){return PedigreeImport.JSONToInternalPropertyMapping.hasOwnProperty(externalPropertyName)?{propertyName:PedigreeImport.JSONToInternalPropertyMapping[externalPropertyName],value:value}:null},PedigreeImport.JSONToInternalRelationshipPropertyMapping={childlessstatus:"childlessStatus",childlessreason:"childlessReason",consanguinity:"consangr",separated:"broken"},PedigreeImport.convertRelationshipProperty=function(externalPropertyName,value){if(!PedigreeImport.JSONToInternalRelationshipPropertyMapping.hasOwnProperty(externalPropertyName))return null;var internalPropertyName=PedigreeImport.JSONToInternalRelationshipPropertyMapping[externalPropertyName];return"consanguinity"==externalPropertyName&&-1==["Y","N","P","U"].indexOf(value)?null:{propertyName:internalPropertyName,value:value}},RelationshipTracker=function(newG,defaultEdgeWeight){this.newG=newG,this.defaultEdgeWeight=defaultEdgeWeight,this.relationships={},this.relChildHubs={},this.chhubRels={}},RelationshipTracker.prototype={createOrGetChildhub:function(partnerID1,partnerID2){if(this.relationships.hasOwnProperty(partnerID1)&&this.relationships[partnerID1].hasOwnProperty(partnerID2))var relID=this.relationships[partnerID1][partnerID2],chhubID=this.relChildHubs[relID];else{void 0===this.relationships[partnerID1]&&(this.relationships[partnerID1]={}),void 0===this.relationships[partnerID2]&&(this.relationships[partnerID2]={});var relID=this.newG._addVertex(null,BaseGraph.TYPE.RELATIONSHIP,{},this.newG.defaultNonPersonNodeWidth),chhubID=this.newG._addVertex(null,BaseGraph.TYPE.CHILDHUB,{},this.newG.defaultNonPersonNodeWidth);this.newG.addEdge(relID,chhubID,this.defaultEdgeWeight),this.newG.addEdge(partnerID1,relID,this.defaultEdgeWeight),this.newG.addEdge(partnerID2,relID,this.defaultEdgeWeight),this.relationships[partnerID1][partnerID2]=relID,this.relationships[partnerID2][partnerID1]=relID,this.relChildHubs[relID]=chhubID,this.chhubRels[chhubID]=relID}return chhubID},getRelationshipIDForChildHub:function(chhubID){return this.chhubRels[chhubID]}};